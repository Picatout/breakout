; src\Interrupts.SRC generated from: C:\Users\Jacques\SimplicityStudio\v4_workspace\BBchip8\src\Interrupts.c
; COMPILER INVOKED BY:
;        c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Jacques\SimplicityStudio\v4_workspace\BBchip8\src\Interrupts.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE SRC(src\Interrupts.SRC) INCDIR(C:\Users\Jacques\SimplicityStudio\v4_workspace\BBchip8\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/EFM8BB1/inc) REGFILE(BBchip8.ORC) PRINT(.\src\Interrupts.lst) COND CODE PAGEWIDTH(120) PAGELENGTH(65)

$NOMOD51

NAME	INTERRUPTS

SPI0CKR	DATA	0A2H
P0	DATA	080H
PSW_OV	BIT	0D0H.2
P1	DATA	090H
WDTCN	DATA	097H
P2	DATA	0A0H
ADC0CF	DATA	0BCH
TMR2CN0_T2XCLK	BIT	0C8H.0
SMB0CN0_MASTER	BIT	0C0H.7
PCA0	DATA	0F9H
EIE1	DATA	0E6H
SMB0CN0_ACK	BIT	0C0H.1
PSCTL	DATA	08FH
IT01CF	DATA	0E4H
SMB0CN0_TXMODE	BIT	0C0H.6
DERIVID	DATA	0ADH
P0MDOUT	DATA	0A4H
P1MDOUT	DATA	0A5H
ADC0CN0_ADINT	BIT	0E8H.5
TMR2RLH	DATA	0CBH
P2MDOUT	DATA	0A6H
IE	DATA	0A8H
TMR3RLH	DATA	093H
EIP1	DATA	0F3H
SCON0_RB8	BIT	098H.2
TMR2RLL	DATA	0CAH
PCA0CPH0	DATA	0FCH
TMR3RLL	DATA	092H
PCA0CPH1	DATA	0EAH
SCON0_TB8	BIT	098H.3
B_B0	BIT	0F0H.0
DP	DATA	082H
PCA0CPH2	DATA	0ECH
B_B1	BIT	0F0H.1
ADC0GT	DATA	0C3H
B_B2	BIT	0F0H.2
PCA0CPL0	DATA	0FBH
B_B3	BIT	0F0H.3
PCA0MD	DATA	0D9H
PCA0CPM0	DATA	0DAH
PCA0CPL1	DATA	0E9H
B_B4	BIT	0F0H.4
PCA0CPM1	DATA	0DBH
PCA0CPL2	DATA	0EBH
B_B5	BIT	0F0H.5
PCA0CPM2	DATA	0DCH
IP	DATA	0B8H
ADC0TK	DATA	0B9H
B_B6	BIT	0F0H.6
ADC0LT	DATA	0C5H
SCON0_MCE	BIT	098H.5
B_B7	BIT	0F0H.7
XBR0	DATA	0E1H
SMB0CF	DATA	0C1H
XBR1	DATA	0E2H
SMB0CN0_STA	BIT	0C0H.5
XBR2	DATA	0E3H
ADC0MX	DATA	0BBH
ACC_ACC0	BIT	0E0H.0
REF0CN	DATA	0D1H
CKCON0	DATA	08EH
ACC_ACC1	BIT	0E0H.1
REG0CN	DATA	0C9H
CRC0IN	DATA	0DDH
TMR2CN0_TR2	BIT	0C8H.2
ACC_ACC2	BIT	0E0H.2
ACC_ACC3	BIT	0E0H.3
SP	DATA	081H
CMP0MD	DATA	09DH
ACC_ACC4	BIT	0E0H.4
LFO0CN	DATA	0B1H
CMP1MD	DATA	0ABH
PCA0CN0_CCF0	BIT	0D8H.0
ACC_ACC5	BIT	0E0H.5
PCA0CN0_CCF1	BIT	0D8H.1
ACC_ACC6	BIT	0E0H.6
TMR2	DATA	0CCH
PCA0CN0_CCF2	BIT	0D8H.2
ACC_ACC7	BIT	0E0H.7
TMR3	DATA	094H
SMB0CN0_ACKRQ	BIT	0C0H.3
VDM0CN	DATA	0FFH
P0MDIN	DATA	0F1H
SCON0_REN	BIT	098H.4
SMB0TC	DATA	0ACH
P1MDIN	DATA	0F2H
SMB0CN0_STO	BIT	0C0H.4
P0MASK	DATA	0FEH
P1MASK	DATA	0EEH
PSW_RS0	BIT	0D0H.3
PCA0CN0_CF	BIT	0D8H.7
PCA0CENT	DATA	09EH
SPI0CN0_RXOVRN	BIT	0F8H.4
PSW_RS1	BIT	0D0H.4
ADC0CN0_ADEN	BIT	0E8H.7
TMOD	DATA	089H
TCON	DATA	088H
CRC0FLIP	DATA	0CFH
PSW_PARITY	BIT	0D0H.0
IE_ES0	BIT	0A8H.4
CMP0MX	DATA	09FH
IE_ET0	BIT	0A8H.1
CMP1MX	DATA	0AAH
IE_ET1	BIT	0A8H.3
P0SKIP	DATA	0D4H
IE_ET2	BIT	0A8H.5
P1SKIP	DATA	0D5H
ADC0CN0	DATA	0E8H
IE_EX0	BIT	0A8H.0
ADC0CN1	DATA	0B2H
PCA0CN0_CR	BIT	0D8H.6
IE_EX1	BIT	0A8H.2
SCON0_SMODE	BIT	098H.7
DEVICEID	DATA	0B5H
CLKSEL	DATA	0A9H
SPI0CN0_SPIEN	BIT	0F8H.0
B	DATA	0F0H
ADC0H	DATA	0BEH
CRC0AUTO	DATA	0D2H
ADC0CN0_ADBMEN	BIT	0E8H.6
TMR2RL	DATA	0CAH
ADC0L	DATA	0BDH
TMR3RL	DATA	092H
PCA0CN0	DATA	0D8H
ACC	DATA	0E0H
PCA0CP0	DATA	0FBH
PCA0CP1	DATA	0E9H
PCA0CP2	DATA	0EBH
CRC0CN0	DATA	0CEH
TH0	DATA	08CH
IP_PS0	BIT	0B8H.4
TH1	DATA	08DH
PCA0H	DATA	0FAH
IP_PT0	BIT	0B8H.1
IP_PT1	BIT	0B8H.3
SMB0CN0_ARBLOST	BIT	0C0H.2
IP_PT2	BIT	0B8H.5
TL0	DATA	08AH
SPI0CN0_TXBMT	BIT	0F8H.1
PSW_F0	BIT	0D0H.5
IE_ESPI0	BIT	0A8H.6
TL1	DATA	08BH
PCA0L	DATA	0F9H
SMB0CN0_SI	BIT	0C0H.0
PSW_F1	BIT	0D0H.1
P0_B0	BIT	080H.0
IP_PX0	BIT	0B8H.0
P1_B0	BIT	090H.0
P0_B1	BIT	080H.1
IP_PX1	BIT	0B8H.2
CMP0CN0	DATA	09BH
TCON_IE0	BIT	088H.1
P2_B0	BIT	0A0H.0
P1_B1	BIT	090H.1
P0_B2	BIT	080H.2
CMP1CN0	DATA	0BFH
TCON_IE1	BIT	088H.3
P2_B1	BIT	0A0H.1
P1_B2	BIT	090H.2
P0_B3	BIT	080H.3
SMB0CN0	DATA	0C0H
P1_B3	BIT	090H.3
P0_B4	BIT	080H.4
P1_B4	BIT	090H.4
P0_B5	BIT	080H.5
P1_B5	BIT	090H.5
P0_B6	BIT	080H.6
P1_B6	BIT	090H.6
P0_B7	BIT	080H.7
P1_B7	BIT	090H.7
DPH	DATA	083H
ADC0GTH	DATA	0C4H
TMR2CN0_TF2H	BIT	0C8H.7
TMR2CN0_T2SPLIT	BIT	0C8H.3
PSW_AC	BIT	0D0H.6
SPI0CN0	DATA	0F8H
HFO0CAL	DATA	0C7H
TCON_TF0	BIT	088H.5
SCON0_RI	BIT	098H.0
DPL	DATA	082H
TCON_TF1	BIT	088H.7
SBUF0	DATA	099H
PCON0	DATA	087H
ADC0GTL	DATA	0C3H
TMR2CN0_TF2L	BIT	0C8H.6
SCON0_TI	BIT	098H.1
ADC0CN0_ADCM0	BIT	0E8H.0
ADC0LTH	DATA	0C6H
TCON_IT0	BIT	088H.0
ADC0CN0_ADCM1	BIT	0E8H.1
RSTSRC	DATA	0EFH
P0MAT	DATA	0FDH
CRC0DAT	DATA	0DEH
TCON_IT1	BIT	088H.2
ADC0CN0_ADCM2	BIT	0E8H.2
SCON0	DATA	098H
PRTDRV	DATA	0F6H
P1MAT	DATA	0EDH
ADC0CN0_ADWINT	BIT	0E8H.3
ADC0CN0_ADBUSY	BIT	0E8H.4
SMB0ADM	DATA	0D6H
ADC0LTL	DATA	0C5H
SPI0CN0_MODF	BIT	0F8H.5
IP_PSPI0	BIT	0B8H.6
PCA0CLR	DATA	09CH
TMR2CN0	DATA	0C8H
TMR3CN0	DATA	091H
SMB0ADR	DATA	0D7H
TCON_TR0	BIT	088H.4
TMR2CN0_TF2CEN	BIT	0C8H.4
TCON_TR1	BIT	088H.6
SMB0DAT	DATA	0C2H
TMR2H	DATA	0CDH
SPI0CFG	DATA	0A1H
TMR3H	DATA	095H
CRC0CNT	DATA	0D3H
PCA0POL	DATA	096H
TMR2L	DATA	0CCH
SPI0CN0_SPIF	BIT	0F8H.7
TMR3L	DATA	094H
ADC0PWR	DATA	0DFH
IE_EA	BIT	0A8H.7
TMR2CN0_TF2LEN	BIT	0C8H.5
SPI0CN0_WCOL	BIT	0F8H.6
SPI0CN0_NSSMD0	BIT	0F8H.2
PSW_CY	BIT	0D0H.7
SPI0DAT	DATA	0A3H
SPI0CN0_NSSMD1	BIT	0F8H.3
ADC0	DATA	0BDH
PSW	DATA	0D0H
PCA0PWM	DATA	0F7H
REVID	DATA	0B6H
FLKEY	DATA	0B7H
ADC0AC	DATA	0B3H
?PR?TIMER0_ISR?INTERRUPTS                SEGMENT CODE 
?PR?PCA0_ISR?INTERRUPTS                  SEGMENT CODE 
?DT?INTERRUPTS       SEGMENT DATA 
?C_INITSEG           SEGMENT CODE 
	EXTRN	XDATA (video)
	EXTRN	DATA (tmr_reload)
	EXTRN	CODE (?C?SIDIV)
	PUBLIC	PCA0_ISR
	PUBLIC	TIMER0_ISR

	RSEG  ?DT?INTERRUPTS
 line_count?142:   DS   2

	RSEG  ?DT?INTERRUPTS
     f_even?143:   DS   1

	RSEG  ?DT?INTERRUPTS
    f_video?144:   DS   1

	RSEG  ?C_INITSEG
	DB	002H
	DB	line_count?142
	DW	00000H

	DB	001H
	DB	f_even?143
	DB	000H

	DB	001H
	DB	f_video?144
	DB	000H

; //=========================================================
; // src/Interrupts.c: generated by Hardware Configurator
; //
; // This file will be regenerated when saving a document.
; // leave the sections inside the "$[...]" comment tags alone
; // or they will be overwritten!
; //=========================================================
; 
; // USER INCLUDES
; #include <SI_EFM8BB1_Register_Enums.h>
; 
; #include "chip8.h"
; 
; //-----------------------------------------------------------------------------
; // TIMER0_ISR
; //-----------------------------------------------------------------------------
; //
; // TIMER0 ISR Content goes here. Remember to clear flag bits:
; // TCON::TF0 (Timer 0 Overflow Flag)
; //
; //-----------------------------------------------------------------------------
CSEG	AT	0000BH
	LJMP	TIMER0_ISR

; SI_INTERRUPT (TIMER0_ISR, TIMER0_IRQn)

	RSEG  ?PR?TIMER0_ISR?INTERRUPTS
	USING	0
TIMER0_ISR:
	PUSH 	ACC
	PUSH 	PSW
	USING	0
			; SOURCE LINE # 22
; {
; 	TCON_TF0=0;
			; SOURCE LINE # 24
	CLR  	TCON_TF0
; 	P0_B7^=1;
			; SOURCE LINE # 25
	MOV  	C,P0_B7
	CPL  	C
	MOV  	P0_B7,C
; 	TL0=tmr_reload&255;
			; SOURCE LINE # 26
	MOV  	A,tmr_reload+01H
	MOV  	TL0,A
; 	TH0=tmr_reload>>8;
			; SOURCE LINE # 27
	MOV  	A,tmr_reload
	MOV  	TH0,A
; }
			; SOURCE LINE # 28
	POP  	PSW
	POP  	ACC
	RETI 	
; END OF TIMER0_ISR

CSEG	AT	0005BH
	LJMP	PCA0_ISR

; 
; /* The PCA0 is used to generate NTSC signal
;  *  channel 0 count video lines and start sync pulse
;  *  channel 1 end sync pulse
;  *  channel 3 serialize video pixels using SPI0
;  */
; 
; //-----------------------------------------------------------------------------
; // PCA0_ISR
; //-----------------------------------------------------------------------------
; //
; // PCA0 ISR Content goes here. Remember to clear flag bits:
; // PCA0CN0::CCF0 (PCA Module 0 Capture/Compare Flag)
; // PCA0CN0::CCF1 (PCA Module 1 Capture/Compare Flag)
; // PCA0CN0::CCF2 (PCA Module 2 Capture/Compare Flag)
; // PCA0CN0::CF (PCA Counter/Timer Overflow Flag)
; // PCA0PWM::COVF (Cycle Overflow Flag)
; //
; //-----------------------------------------------------------------------------
; SI_INTERRUPT_USING (PCA0_ISR, PCA0_IRQn,1)// use register bank 1

	RSEG  ?PR?PCA0_ISR?INTERRUPTS
	USING	1
PCA0_ISR:
	PUSH 	ACC
	PUSH 	B
	PUSH 	DPH
	PUSH 	DPL
	PUSH 	PSW
	USING	1
	MOV  	PSW,#08H
			; SOURCE LINE # 48
; {
; 	char i;
; 	unsigned char xdata *ln;
; 
; 	static int line_count=0;
; 	static unsigned char f_even=0;
; 	static unsigned char f_video=0;
; 
; 	if (PCA0CN0_CCF0) { // hline sync
			; SOURCE LINE # 57
	JNB  	PCA0CN0_CCF0,?C0002
; 		PCA0CN0_CCF0=0;
			; SOURCE LINE # 58
	CLR  	PCA0CN0_CCF0
; 		line_count++;
			; SOURCE LINE # 59
	INC  	line_count?142+01H
	MOV  	A,line_count?142+01H
	JNZ  	?C0024
	INC  	line_count?142
?C0024:
; 		if ((f_even && (line_count==262))||(!f_even && (line_count==263))) {
			; SOURCE LINE # 60
	MOV  	A,f_even?143
	JZ   	?C0005
	MOV  	A,line_count?142+01H
	XRL  	A,#06H
	JNZ  	?C0025
	MOV  	A,line_count?142
	XRL  	A,#01H
?C0025:
	JZ   	?C0004
?C0005:
	MOV  	A,f_even?143
	JNZ  	?C0003
	MOV  	A,line_count?142+01H
	CJNE 	A,#07H,?C0003
	MOV  	A,line_count?142
	CJNE 	A,#01H,?C0003
?C0004:
; 			line_count=0;
			; SOURCE LINE # 61
	MOV  	line_count?142,#00H
	MOV  	line_count?142+01H,#00H
; 			f_even^=1;
			; SOURCE LINE # 62
	XRL  	f_even?143,#01H
; 		}
			; SOURCE LINE # 63
?C0003:
; 		P0_B4=0;
			; SOURCE LINE # 64
	CLR  	P0_B4
; 		PCA0CP0+=400;
			; SOURCE LINE # 65
	MOV  	A,#090H
	ADD  	A,PCA0CP0
	MOV  	PCA0CP0,A
	MOV  	A,#01H
	ADDC 	A,PCA0CP0+01H
	MOV  	PCA0CP0+01H,A
; 	} else if (PCA0CN0_CCF1) { // hsync pulse end
			; SOURCE LINE # 66
	LJMP 	?C0023
?C0002:
	JNB  	PCA0CN0_CCF1,?C0007
; 		PCA0CN0_CCF1=0;
			; SOURCE LINE # 67
	CLR  	PCA0CN0_CCF1
; 		PCA0CP1+=400;
			; SOURCE LINE # 68
	MOV  	A,#090H
	ADD  	A,PCA0CP1
	MOV  	PCA0CP1,A
	MOV  	A,#01H
	ADDC 	A,PCA0CP1+01H
	MOV  	PCA0CP1+01H,A
; 		switch(line_count) {
			; SOURCE LINE # 69
	MOV  	A,line_count?142
	JNZ  	?C0014
	MOV  	A,line_count?142+01H
	DEC  	A
	ADD  	A,#0FDH
	JNC  	?C0023
	ADD  	A,#01CH
	JZ   	?C0013
	ADD  	A,#0C0H
	JNZ  	?C0014
; 			case 1:
			; SOURCE LINE # 70
; 			case 2:
			; SOURCE LINE # 71
; 			case 3:
			; SOURCE LINE # 72
; 			break;
			; SOURCE LINE # 73
; 			case 40:
			; SOURCE LINE # 74
?C0012:
; 			f_video=1;
			; SOURCE LINE # 75
	MOV  	f_video?144,#01H
; 			P0_B4=1;
			; SOURCE LINE # 76
	SETB 	P0_B4
; 			break;
			; SOURCE LINE # 77
	SJMP 	?C0023
; 			case 232:
			; SOURCE LINE # 78
?C0013:
; 			f_video=0;
			; SOURCE LINE # 79
	MOV  	f_video?144,#00H
; 			default:
			; SOURCE LINE # 80
?C0014:
; 			P0_B4=1;
			; SOURCE LINE # 81
	SETB 	P0_B4
; 		} //switch
			; SOURCE LINE # 82
; 
; 	} else if (PCA0CN0_CCF2) { // video output
			; SOURCE LINE # 84
	SJMP 	?C0023
?C0007:
	JNB  	PCA0CN0_CCF2,?C0023
; 		PCA0CN0_CCF2=0;
			; SOURCE LINE # 85
	CLR  	PCA0CN0_CCF2
; 		PCA0CP2+=400;
			; SOURCE LINE # 86
	MOV  	A,#090H
	ADD  	A,PCA0CP2
	MOV  	PCA0CP2,A
	MOV  	A,#01H
	ADDC 	A,PCA0CP2+01H
	MOV  	PCA0CP2+01H,A
; 		if (f_video) {
			; SOURCE LINE # 87
	MOV  	A,f_video?144
	JZ   	?C0023
; 			ln=&video[(line_count-40)/6*8];
			; SOURCE LINE # 88
	MOV  	A,line_count?142+01H
	ADD  	A,#0D8H
	MOV  	R7,A
	MOV  	A,line_count?142
	ADDC 	A,#0FFH
	MOV  	R6,A
	MOV  	R4,#00H
	MOV  	R5,#06H
	LCALL	?C?SIDIV
	MOV  	A,R7
	MOV  	R0,#03H
?C0027:
	CLR  	C
	RLC  	A
	XCH  	A,R6
	RLC  	A
	XCH  	A,R6
	DJNZ 	R0,?C0027
	ADD  	A,#LOW (video)
	MOV  	DPL,A
	MOV  	A,#HIGH (video)
	ADDC 	A,R6
	MOV  	R7,DPL
	MOV  	R6,A
;---- Variable 'ln?141' assigned to Register 'R6/R7' ----
; 			for (i=0;i<8;i++) {
			; SOURCE LINE # 89
;---- Variable 'i?140' assigned to Register 'R5' ----
	CLR  	A
	MOV  	R5,A
?C0018:
; 				SPI0DAT= *ln++;
			; SOURCE LINE # 90
	INC  	R7
	MOV  	A,R7
	MOV  	R2,AR6
	JNZ  	?C0028
	INC  	R6
?C0028:
	DEC  	A
	MOV  	DPL,A
	MOV  	DPH,R2
	MOVX 	A,@DPTR
	MOV  	SPI0DAT,A
?C0021:
; 				while (!(SPI0CN0&SPI0CN0_TXBMT__BMASK));
			; SOURCE LINE # 91
	MOV  	A,SPI0CN0
	JNB  	ACC.1,?C0021
?C0022:
; 			}
			; SOURCE LINE # 92
?C0020:
	INC  	R5
	CJNE 	R5,#08H,?C0018
?C0019:
; 			SPI0DAT=0;
			; SOURCE LINE # 93
	MOV  	SPI0DAT,#00H
; 		}
			; SOURCE LINE # 94
; 	}
			; SOURCE LINE # 95
; }
			; SOURCE LINE # 96
?C0023:
	POP  	PSW
	POP  	DPL
	POP  	DPH
	POP  	B
	POP  	ACC
	RETI 	
; END OF PCA0_ISR

	END
