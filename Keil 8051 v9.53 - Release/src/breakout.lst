C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE BREAKOUT
OBJECT MODULE PLACED IN .\src\breakout.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Jacques
                    -\SimplicityStudio\v4_workspace\BBchip8\src\breakout.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZ
                    -Y(3) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Jacques\SimplicityStudio\v4_workspa
                    -ce\BBchip8\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/shared/si8051base;C:/SiliconLabs/Si
                    -mplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/EFM8BB1/inc) REGFILE(BBchip8.ORC) PRINT(.\src\breakout.lst) COND CO
                    -DE PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\breakout.OBJ)

line level    source

   1          /*
   2           * breakout.c
   3           *
   4           *  Created on: 2018-01-12
   5           *      Author: Jacques
   6           */
   7          
   8          #include "chip8.h"
   9          #include "keypad.h"
  10          
  11          #define min(a,b) (a)<(b)?(a):(b)
  12          #define max(a,b) (a)>(b)?(a):(b)
  13          
  14          
  15          // brick row gain
  16          // rows are numbered from bottom to top.
  17          #define ROW_1  (1)
  18          #define ROW_2  (1)
  19          #define ROW_3  (3)
  20          #define ROW_4  (3)
  21          #define ROW_5  (5)
  22          #define ROW_6  (5)
  23          #define ROW_7  (7)
  24          #define ROW_8  (7)
  25          #define ROW_8_Y (8)
  26          #define BRIX_PER_ROW (15)
  27          // bricks wall bounds
  28          #define BRIX_LEFT_X (2)
  29          #define BRIX_RIGHT_X (61)
  30          #define BRIX_TOP_Y (8)
  31          #define BRIX_BOTTOM_Y (15)
  32          // play area bounds
  33          #define TOP_BOUND (6)
  34          #define LEFT_BOUND (0)
  35          #define RIGHT_BOUND (63)
  36          #define BOTTOM_BOUND (31)
  37          #define BRIX_ROW_WIDTH (60)
  38          // each brick is 4 pixels
  39          #define BRIX_WIDTH (4)
  40          // 8 rows of 15 bricks
  41          #define BRIX_COUNT (8*15)
  42          // there is a large and small paddle
  43          // this is the width in pixels.
  44          #define LARGE_PADDLE (8)
  45          #define SMALL_PADDLE (4)
  46          // 3 rounds per game.
  47          #define GAME_ROUNDS (3)
  48          // paddle movement bounds
  49          #define PADDLE_LEFT_BOUND (1)
  50          #define PADDLE_RIGHT_BOUND (63)
  51          // ball speed delay
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 2   

  52          // small number is fast ball.
  53          #define SPEED_SLOW (40)
  54          #define SPEED_MEDIUM (20)
  55          #define SPEED_FAST (10)
  56          // numbers display position
  57          #define DISPLAY_Y (0)
  58          #define SCORE_X (0)
  59          #define ROUND_X (12)
  60          #define HSCORE_X (44)
  61          // score gain for each row.
  62          // 2 top rows earn the highest gain of 7.
  63          char code gain[8]={ROW_8,ROW_7,ROW_6,ROW_5,ROW_4,ROW_3,ROW_2,ROW_1};
  64          
  65          char paddle_pos; // paddle position
  66          unsigned int score; // current score
  67          unsigned int high_score; // highest score
  68          char rounds; // number of rounds left in game.
  69          char speed; // ball speed.
  70          char paddle_used; // large or small paddle
  71          char ball_x;
  72          char ball_y;
  73          char ball_dx; // {-1,1}
  74          char x_factor;  // ball x speed factor {1,2}
  75          char ball_dy; // {-1,1}
  76          char new_round; // boolean
  77          char paddle_dx; // {-1,1}
  78          char paddle_last;// last paddle direction
  79          char brix_left; // count of bricks left in game.
  80          
  81          void draw_brix(){
  82   1              char x,y;
  83   1      
  84   1              for (y=BRIX_TOP_Y;y<=BRIX_BOTTOM_Y;y++)
  85   1                      for (x=BRIX_LEFT_X;x<=BRIX_RIGHT_X;x++)
  86   1                              xor_pixel(x,y);
  87   1      }
  88          
  89          void draw_walls(){
  90   1              char p;
  91   1      
  92   1              for (p=LEFT_BOUND;p<=RIGHT_BOUND;p++) xor_pixel(p,TOP_BOUND);
  93   1              for (p=TOP_BOUND+1;p<=BOTTOM_BOUND;p++){
  94   2                      xor_pixel(LEFT_BOUND,p);
  95   2                      xor_pixel(RIGHT_BOUND,p);
  96   2              }
  97   1      }
  98          
  99          void draw_paddle(){
 100   1              char x;
 101   1      
 102   1              for (x=paddle_pos;x<(paddle_pos+paddle_used);x++)
 103   1                      xor_pixel(x,31);
 104   1      }
 105          
 106          void init_game(){
 107   1              paddle_used=LARGE_PADDLE;
 108   1              score=0;
 109   1              rounds=GAME_ROUNDS;
 110   1          speed=SPEED_SLOW;
 111   1          paddle_pos=(HRES-LARGE_PADDLE)/2;
 112   1              clr_scr();
 113   1              draw_walls();
 114   1              draw_brix();
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 3   

 115   1              print_int(SCORE_X,DISPLAY_Y,score);
 116   1              print_int(ROUND_X,DISPLAY_Y,rounds);
 117   1              print_int(HSCORE_X,DISPLAY_Y,high_score);
 118   1              draw_paddle();
 119   1              paddle_dx=0;
 120   1              paddle_last=0;
 121   1              new_round=1;
 122   1              brix_left=BRIX_COUNT;
 123   1      }
 124          
 125          void wait_service(){
 126   1              char k;
 127   1      
 128   1          while(keypad_read());
 129   1              ball_y=30;
 130   1              ball_x=paddle_pos+(paddle_used>>1);
 131   1              xor_pixel(ball_x,ball_y);
 132   1              k=wait_key();
 133   1              ball_dy=-1;
 134   1              if (rand_bit()) ball_dx=1; else ball_dx=-1;
 135   1              if (rand_bit())x_factor=1;else x_factor=2;
 136   1              new_round=0;
 137   1      }
 138          
 139          char code bravo_msg[15]={
 140                  0xce,0xea,0xe8,
 141                  0xaa,0xaa,0xa8,
 142                  0xcc,0xea,0xa8,
 143                  0xaa,0xaa,0xa0,
 144                  0xca,0xa4,0xe8
 145          };
 146          
 147          // got maximum score
 148          void bravo(){
 149   1              char x,y,ofs,b;
 150   1              clr_scr();
 151   1              for (x=0;x<21;x++){
 152   2                      ofs=x/8;
 153   2                      b=x%8;
 154   2                      for (y=0;y<5;y++){
 155   3                              if (bravo_msg[ofs+y*3]&(1<<(7-b))){
 156   4                                      xor_pixel(63,13+y);
 157   4                              }
 158   3                      }
 159   2                      scroll_left();
 160   2                      pause(100);
 161   2              }
 162   1              for (x=0;x<22;x++){
 163   2                      scroll_left();
 164   2                      pause(100);
 165   2              }
 166   1      }
 167          
 168          char code breakout_msg[20]={
 169                          0xce,0xee,0xae,0xae,
 170                          0xaa,0x8a,0xaa,0xa4,
 171                          0xcc,0xee,0xca,0xa4,
 172                          0xaa,0x8a,0xaa,0xa4,
 173                          0xca,0xea,0xae,0xe4
 174          };
 175          
 176          void breakout_screen(){
 177   1              unsigned char x,y,ofs,b;
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 4   

 178   1              clr_scr();
 179   1              for (y=0;y<5;y++){
 180   2                      ofs=4*y;
 181   2                      for (x=0;x<32;x++){
 182   3                              b=x%8;
 183   3                              if (breakout_msg[ofs+x/8]&(1<<(7-b))){
 184   4                                      xor_pixel(16+x,13+y);
 185   4                              }
 186   3                      }
 187   2              }
 188   1              pause(1500);
 189   1              for (b=0;b<255;b++){
 190   2                      pause(10);
 191   2                      xor_pixel(16+random(5),12+random(3));
 192   2              }
 193   1      
 194   1      }
 195          
 196          void delete_brix(char x, char y){
 197   1              char i;
 198   1              x-=2;
 199   1              x&=0xfc;
 200   1              x+=2;
 201   1              for (i=0;i<BRIX_WIDTH;(i++,x++)) xor_pixel(x,y);
 202   1              brix_left--;
 203   1              if (! brix_left){
 204   2                      bravo();
 205   2                      rounds=0;
 206   2                      return;
 207   2              }
 208   1              print_int(SCORE_X,DISPLAY_Y,score);
 209   1              score+=gain[y-ROW_8_Y];
 210   1              print_int(SCORE_X,DISPLAY_Y,score);
 211   1              if (ball_dy<0) ball_dy=-ball_dy;
 212   1              if ((y<9)&&(speed>SPEED_MEDIUM)) speed=SPEED_MEDIUM;
 213   1      }
 214          
 215          // return TRUE if collision with bricks wall.
 216          char is_brix_collision(char x, char y){
 217   1              if ((x>=BRIX_LEFT_X) && (x<=BRIX_RIGHT_X)&&
 218   1                      (y>=BRIX_TOP_Y)&& (y<=BRIX_BOTTOM_Y))
 219   1                      return 1;
 220   1              else
 221   1                      return 0;
 222   1      }
 223          
 224          // return TRUE if collision with area wall
 225          char is_bound_collision(char x, char y){
 226   1              return (y==TOP_BOUND) || (x==LEFT_BOUND) || (x==RIGHT_BOUND);
 227   1      }
 228          
 229          // return TRUE if collision with paddle
 230          char is_paddle_collision(char x, char y){
 231   1              return ((y==BOTTOM_BOUND) && (x>=paddle_pos) && (x<(paddle_pos+paddle_used)));
 232   1      }
 233          
 234          void check_collision(){
 235   1              noise(10);
 236   1              xor_pixel(ball_x,ball_y);
 237   1              if (is_brix_collision(ball_x,ball_y)){
 238   2                      delete_brix(ball_x,ball_y);
 239   2              }else if (is_bound_collision(ball_x,ball_y)){
 240   2                      if (ball_y==TOP_BOUND) ball_dy=-ball_dy;
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 5   

 241   2                      if ((ball_x==LEFT_BOUND)||(ball_x==RIGHT_BOUND)){
 242   3                              ball_dx=-ball_dx;
 243   3                              if (ball_dy==BOTTOM_BOUND){
 244   4                                      ball_dy-=ball_dy;
 245   4                              }
 246   3                      }
 247   2              }else{// paddle collision
 248   2                      ball_dy=-ball_dy;
 249   2                      if ((ball_x==paddle_pos)||(ball_x==(paddle_pos+paddle_used-1))){
 250   3                              x_factor=2;
 251   3                      }
 252   2              }
 253   1              xor_pixel(ball_x,ball_y);
 254   1      }
 255          
 256          void move_ball(){
 257   1              xor_pixel(ball_x,ball_y);
 258   1              ball_x+=ball_dx*x_factor;
 259   1              if (ball_x<LEFT_BOUND){
 260   2                      ball_x=LEFT_BOUND;
 261   2              }else if (ball_x>RIGHT_BOUND){
 262   2                      ball_x=RIGHT_BOUND;
 263   2              }
 264   1              ball_y+=ball_dy;
 265   1              if (ball_y>BOTTOM_BOUND){
 266   2                      ball_y=BOTTOM_BOUND;
 267   2              }else if (ball_y<TOP_BOUND){
 268   2                      ball_y=TOP_BOUND;
 269   2              }
 270   1              if (xor_pixel(ball_x,ball_y)){
 271   2                      check_collision();
 272   2              }else if (ball_y==31){
 273   2                      xor_pixel(ball_x,ball_y);
 274   2                      print_int(ROUND_X,DISPLAY_Y,rounds);
 275   2                      rounds--;
 276   2                      print_int(ROUND_X,DISPLAY_Y,rounds);
 277   2                      new_round=1;
 278   2              }
 279   1      }
 280          
 281          #define LEFT (0)
 282          #define RIGHT (1)
 283          void move_paddle(char direction){
 284   1              draw_paddle();
 285   1              if (direction==paddle_last){
 286   2                      if (paddle_dx<4)paddle_dx++;
 287   2              }else{
 288   2                      paddle_dx=1;
 289   2              }
 290   1              if (direction){
 291   2                      if (paddle_pos<(PADDLE_RIGHT_BOUND-paddle_used)){
 292   3                              paddle_pos=min(paddle_pos+paddle_dx,PADDLE_RIGHT_BOUND-paddle_used);
 293   3                      }
 294   2              }else{
 295   2                      if (paddle_pos>PADDLE_LEFT_BOUND){
 296   3                              paddle_pos=max(paddle_pos-paddle_dx,PADDLE_LEFT_BOUND);
 297   3                      }
 298   2              }
 299   1              draw_paddle();
 300   1              paddle_last=direction;
 301   1      }
 302          
 303          // game over animation
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 6   

 304          void game_over(){
 305   1              char i;
 306   1              unsigned int frq;
 307   1              frq=65380;
 308   1              for (i=0;i<32;i++){
 309   2                 scroll_down(1);
 310   2                 tone(frq,2);
 311   2                 frq-=70;
 312   2              }
 313   1      }
 314          
 315          void breakout(){
 316   1              char k;
 317   1                init_game();
 318   1                while (rounds){
 319   2                        if (new_round) wait_service();
 320   2                        move_ball();
 321   2                        k=keypad_read();
 322   2                        switch (k){
 323   3                        case KEY_LEFT:
 324   3                                move_paddle(LEFT);
 325   3                                break;
 326   3                        case KEY_RIGHT:
 327   3                                move_paddle(RIGHT);
 328   3                                break;
 329   3                        default:
 330   3                                paddle_dx=1;
 331   3                        }
 332   2                        pause(speed);
 333   2                }
 334   1                game_over();
 335   1                if (score>high_score) high_score=score;
 336   1      }
 337          
 338          
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0075 (BEGIN)
0000         L?0118:
0000         L?0119:
0000 E500        R     MOV     A,rounds
0002 FB                MOV     R3,A
0003 33                RLC     A
0004 95E0              SUBB    A,ACC
0006 FA                MOV     R2,A
0007 E4                CLR     A
0008 FD                MOV     R5,A
0009 7F0C              MOV     R7,#0CH
000B 22                RET     
000C         L?0120:
000C FD                MOV     R5,A
000D 33                RLC     A
000E 95E0              SUBB    A,ACC
0010 FC                MOV     R4,A
0011 E500        R     MOV     A,paddle_pos
0013 FB                MOV     R3,A
0014 33                RLC     A
0015 95E0              SUBB    A,ACC
0017 FA                MOV     R2,A
0018 EB                MOV     A,R3
0019 2D                ADD     A,R5
001A FD                MOV     R5,A
001B EA                MOV     A,R2
001C 3C                ADDC    A,R4
001D FC                MOV     R4,A
001E 22                RET     
001F         L?0124:
001F EF                MOV     A,R7
0020 33                RLC     A
0021 95E0              SUBB    A,ACC
0023 FE                MOV     R6,A
0024 ED                MOV     A,R5
0025 33                RLC     A
0026 95E0              SUBB    A,ACC
0028 22                RET     
0029         L?0125:
0029 93                MOVC    A,@A+DPTR
002A FD                MOV     R5,A
002B 33                RLC     A
002C 95E0              SUBB    A,ACC
002E FC                MOV     R4,A
002F C3                CLR     C
0030 7407              MOV     A,#07H
0032 22                RET     
0033         L?0126:
0033         L?0127:
0033 E500        R     MOV     A,ball_dy
0035 F4                CPL     A
0036 04                INC     A
0037 F500        R     MOV     ball_dy,A
0039 22                RET     
             ; FUNCTION Com0075 (END)

             ; FUNCTION draw_brix (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 84
0000 750008      R     MOV     y,#08H
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 8   

0003         ?C0001:
                                           ; SOURCE LINE # 85
0003 750002      R     MOV     x,#02H
0006         ?C0004:
                                           ; SOURCE LINE # 86
0006 AD00        R     MOV     R5,y
0008 AF00        R     MOV     R7,x
000A 120000      E     LCALL   _xor_pixel
000D 0500        R     INC     x
000F D3                SETB    C
0010 E500        R     MOV     A,x
0012 6480              XRL     A,#080H
0014 94BD              SUBB    A,#0BDH
0016 40EE              JC      ?C0004
0018         ?C0003:
0018 0500        R     INC     y
001A D3                SETB    C
001B E500        R     MOV     A,y
001D 6480              XRL     A,#080H
001F 948F              SUBB    A,#08FH
0021 40E0              JC      ?C0001
                                           ; SOURCE LINE # 87
0023         ?C0007:
0023 22                RET     
             ; FUNCTION draw_brix (END)

             ; FUNCTION draw_walls (BEGIN)
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 92
0000 E4                CLR     A
0001 F500        R     MOV     p,A
0003         ?C0008:
0003 7D06              MOV     R5,#06H
0005 AF00        R     MOV     R7,p
0007 120000      R     LCALL   L?0123
000A 94BF              SUBB    A,#0BFH
000C 40F5              JC      ?C0008
000E         ?C0009:
                                           ; SOURCE LINE # 93
000E 750007      R     MOV     p,#07H
0011         ?C0011:
                                           ; SOURCE LINE # 94
0011 AD00        R     MOV     R5,p
0013 E4                CLR     A
0014 FF                MOV     R7,A
0015 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 95
0018 AD00        R     MOV     R5,p
001A 7F3F              MOV     R7,#03FH
                                           ; SOURCE LINE # 96
001C 120000      R     LCALL   L?0123
001F 949F              SUBB    A,#09FH
0021 40EE              JC      ?C0011
                                           ; SOURCE LINE # 97
0023         ?C0014:
0023 22                RET     
0024         L?0123:
0024 120000      E     LCALL   _xor_pixel
0027 0500        R     INC     p
0029 D3                SETB    C
002A E500        R     MOV     A,p
002C 6480              XRL     A,#080H
002E 22                RET     
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 9   

             ; FUNCTION draw_walls (END)

             ; FUNCTION draw_paddle (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 102
0000 850000      R     MOV     x,paddle_pos
0003         ?C0015:
0003 AF00        R     MOV     R7,paddle_used
0005 AD00        R     MOV     R5,paddle_pos
0007 120000      R     LCALL   L?0124
000A FC                MOV     R4,A
000B ED                MOV     A,R5
000C 2F                ADD     A,R7
000D FF                MOV     R7,A
000E EC                MOV     A,R4
000F 3E                ADDC    A,R6
0010 FE                MOV     R6,A
0011 AD00        R     MOV     R5,x
0013 ED                MOV     A,R5
0014 33                RLC     A
0015 95E0              SUBB    A,ACC
0017 FC                MOV     R4,A
0018 C3                CLR     C
0019 ED                MOV     A,R5
001A 9F                SUBB    A,R7
001B EE                MOV     A,R6
001C 6480              XRL     A,#080H
001E F8                MOV     R0,A
001F EC                MOV     A,R4
0020 6480              XRL     A,#080H
0022 98                SUBB    A,R0
0023 500B              JNC     ?C0018
                                           ; SOURCE LINE # 103
0025 7D1F              MOV     R5,#01FH
0027 AF00        R     MOV     R7,x
0029 120000      E     LCALL   _xor_pixel
002C 0500        R     INC     x
002E 80D3              SJMP    ?C0015
                                           ; SOURCE LINE # 104
0030         ?C0018:
0030 22                RET     
             ; FUNCTION draw_paddle (END)

             ; FUNCTION init_game (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0000 750008      R     MOV     paddle_used,#08H
                                           ; SOURCE LINE # 108
0003 E4                CLR     A
0004 F500        R     MOV     score,A
0006 F500        R     MOV     score+01H,A
                                           ; SOURCE LINE # 109
0008 750003      R     MOV     rounds,#03H
                                           ; SOURCE LINE # 110
000B 750028      R     MOV     speed,#028H
                                           ; SOURCE LINE # 111
000E 75001C      R     MOV     paddle_pos,#01CH
                                           ; SOURCE LINE # 112
0011 120000      E     LCALL   clr_scr
                                           ; SOURCE LINE # 113
0014 120000      R     LCALL   draw_walls
                                           ; SOURCE LINE # 114
0017 120000      R     LCALL   draw_brix
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 10  

                                           ; SOURCE LINE # 115
001A AB00        R     MOV     R3,score+01H
001C AA00        R     MOV     R2,score
001E E4                CLR     A
001F FD                MOV     R5,A
0020 FF                MOV     R7,A
0021 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 116
0024 120000      R     LCALL   L?0118
0027 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 117
002A AB00        R     MOV     R3,high_score+01H
002C AA00        R     MOV     R2,high_score
002E E4                CLR     A
002F FD                MOV     R5,A
0030 7F2C              MOV     R7,#02CH
0032 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 118
0035 120000      R     LCALL   draw_paddle
                                           ; SOURCE LINE # 119
0038 E4                CLR     A
0039 F500        R     MOV     paddle_dx,A
                                           ; SOURCE LINE # 120
003B F500        R     MOV     paddle_last,A
                                           ; SOURCE LINE # 121
003D 750001      R     MOV     new_round,#01H
                                           ; SOURCE LINE # 122
0040 750078      R     MOV     brix_left,#078H
                                           ; SOURCE LINE # 123
0043 22                RET     
             ; FUNCTION init_game (END)

             ; FUNCTION wait_service (BEGIN)
                                           ; SOURCE LINE # 125
0000         ?C0020:
                                           ; SOURCE LINE # 128
0000 120000      E     LCALL   keypad_read
0003 EF                MOV     A,R7
0004 70FA              JNZ     ?C0020
0006         ?C0021:
                                           ; SOURCE LINE # 129
0006 75001E      R     MOV     ball_y,#01EH
                                           ; SOURCE LINE # 130
0009 E500        R     MOV     A,paddle_used
000B A2E7              MOV     C,ACC.7
000D 13                RRC     A
000E 2500        R     ADD     A,paddle_pos
0010 F500        R     MOV     ball_x,A
                                           ; SOURCE LINE # 131
0012 AD00        R     MOV     R5,ball_y
0014 FF                MOV     R7,A
0015 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 132
0018 120000      E     LCALL   wait_key
001B 8F00        R     MOV     k,R7
                                           ; SOURCE LINE # 133
001D 7500FF      R     MOV     ball_dy,#0FFH
                                           ; SOURCE LINE # 134
0020 120000      E     LCALL   rand_bit
0023 EF                MOV     A,R7
0024 6005              JZ      ?C0022
0026 750001      R     MOV     ball_dx,#01H
0029 8003              SJMP    ?C0023
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 11  

002B         ?C0022:
002B 7500FF      R     MOV     ball_dx,#0FFH
002E         ?C0023:
                                           ; SOURCE LINE # 135
002E 120000      E     LCALL   rand_bit
0031 EF                MOV     A,R7
0032 6005              JZ      ?C0024
0034 750001      R     MOV     x_factor,#01H
0037 8003              SJMP    ?C0025
0039         ?C0024:
0039 750002      R     MOV     x_factor,#02H
003C         ?C0025:
                                           ; SOURCE LINE # 136
003C E4                CLR     A
003D F500        R     MOV     new_round,A
                                           ; SOURCE LINE # 137
003F 22                RET     
             ; FUNCTION wait_service (END)

             ; FUNCTION bravo (BEGIN)
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 150
0000 120000      E     LCALL   clr_scr
                                           ; SOURCE LINE # 151
0003 E4                CLR     A
0004 F500        R     MOV     x,A
0006         ?C0027:
                                           ; SOURCE LINE # 152
0006 E500        R     MOV     A,x
0008 75F008            MOV     B,#08H
000B 120000      E     LCALL   ?C?SCDIV
000E F500        R     MOV     ofs,A
                                           ; SOURCE LINE # 153
0010 E500        R     MOV     A,x
0012 75F008            MOV     B,#08H
0015 120000      E     LCALL   ?C?SCDIV
0018 85F000      R     MOV     b,B
                                           ; SOURCE LINE # 154
001B E4                CLR     A
001C F500        R     MOV     y,A
001E         ?C0030:
                                           ; SOURCE LINE # 155
001E AF00        R     MOV     R7,ofs
0020 AD00        R     MOV     R5,y
0022 120000      R     LCALL   L?0124
0025 8D82              MOV     DPL,R5
0027 F583              MOV     DPH,A
0029 7403              MOV     A,#03H
002B 120000      E     LCALL   ?C?OFFX256
002E E582              MOV     A,DPL
0030 2F                ADD     A,R7
0031 F582              MOV     DPL,A
0033 E583              MOV     A,DPH
0035 3E                ADDC    A,R6
0036 F583              MOV     DPH,A
0038 E582              MOV     A,DPL
003A 2400        R     ADD     A,#LOW bravo_msg
003C F582              MOV     DPL,A
003E E583              MOV     A,DPH
0040 3400        R     ADDC    A,#HIGH bravo_msg
0042 F583              MOV     DPH,A
0044 E4                CLR     A
0045 120000      R     LCALL   L?0125
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 12  

0048 9500        R     SUBB    A,b
004A FF                MOV     R7,A
004B 7401              MOV     A,#01H
004D 7E00              MOV     R6,#00H
004F A807              MOV     R0,AR7
0051 08                INC     R0
0052 8005              SJMP    ?C0113
0054         ?C0112:
0054 C3                CLR     C
0055 33                RLC     A
0056 CE                XCH     A,R6
0057 33                RLC     A
0058 CE                XCH     A,R6
0059         ?C0113:
0059 D8F9              DJNZ    R0,?C0112
005B FF                MOV     R7,A
005C EE                MOV     A,R6
005D 5C                ANL     A,R4
005E FE                MOV     R6,A
005F EF                MOV     A,R7
0060 5D                ANL     A,R5
0061 4E                ORL     A,R6
0062 600A              JZ      ?C0032
                                           ; SOURCE LINE # 156
0064 E500        R     MOV     A,y
0066 240D              ADD     A,#0DH
0068 FD                MOV     R5,A
0069 7F3F              MOV     R7,#03FH
006B 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
006E         ?C0032:
006E 0500        R     INC     y
0070 C3                CLR     C
0071 E500        R     MOV     A,y
0073 6480              XRL     A,#080H
0075 9485              SUBB    A,#085H
0077 40A5              JC      ?C0030
0079         ?C0031:
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
0079 120000      R     LCALL   L?0121
007C 9495              SUBB    A,#095H
007E 4086              JC      ?C0027
0080         ?C0028:
                                           ; SOURCE LINE # 162
0080 E4                CLR     A
0081 F500        R     MOV     x,A
0083         ?C0034:
                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
0083 120000      R     LCALL   L?0121
0086 9496              SUBB    A,#096H
0088 40F9              JC      ?C0034
                                           ; SOURCE LINE # 166
008A         ?C0037:
008A 22                RET     
008B         L?0121:
008B 120000      E     LCALL   scroll_left
008E 7F64              MOV     R7,#064H
0090 7E00              MOV     R6,#00H
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 13  

0092 120000      E     LCALL   _pause
0095 0500        R     INC     x
0097 C3                CLR     C
0098 E500        R     MOV     A,x
009A 6480              XRL     A,#080H
009C 22                RET     
             ; FUNCTION bravo (END)

             ; FUNCTION breakout_screen (BEGIN)
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 178
0000 120000      E     LCALL   clr_scr
                                           ; SOURCE LINE # 179
0003 E4                CLR     A
0004 F500        R     MOV     y,A
0006         ?C0038:
                                           ; SOURCE LINE # 180
0006 E500        R     MOV     A,y
0008 25E0              ADD     A,ACC
000A 25E0              ADD     A,ACC
000C F500        R     MOV     ofs,A
                                           ; SOURCE LINE # 181
000E E4                CLR     A
000F F500        R     MOV     x,A
0011         ?C0041:
                                           ; SOURCE LINE # 182
0011 E500        R     MOV     A,x
0013 5407              ANL     A,#07H
0015 F500        R     MOV     b,A
                                           ; SOURCE LINE # 183
0017 E500        R     MOV     A,x
0019 13                RRC     A
001A 13                RRC     A
001B 13                RRC     A
001C 541F              ANL     A,#01FH
001E 2500        R     ADD     A,ofs
0020 900000      R     MOV     DPTR,#breakout_msg
0023 120000      R     LCALL   L?0125
0026 9500        R     SUBB    A,b
0028 FF                MOV     R7,A
0029 7401              MOV     A,#01H
002B 7E00              MOV     R6,#00H
002D A807              MOV     R0,AR7
002F 08                INC     R0
0030 8005              SJMP    ?C0115
0032         ?C0114:
0032 C3                CLR     C
0033 33                RLC     A
0034 CE                XCH     A,R6
0035 33                RLC     A
0036 CE                XCH     A,R6
0037         ?C0115:
0037 D8F9              DJNZ    R0,?C0114
0039 FF                MOV     R7,A
003A EE                MOV     A,R6
003B 5C                ANL     A,R4
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 5D                ANL     A,R5
003F 4E                ORL     A,R6
0040 600D              JZ      ?C0043
                                           ; SOURCE LINE # 184
0042 E500        R     MOV     A,x
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 14  

0044 2410              ADD     A,#010H
0046 FF                MOV     R7,A
0047 E500        R     MOV     A,y
0049 240D              ADD     A,#0DH
004B FD                MOV     R5,A
004C 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
004F         ?C0043:
004F 0500        R     INC     x
0051 E500        R     MOV     A,x
0053 C3                CLR     C
0054 9420              SUBB    A,#020H
0056 40B9              JC      ?C0041
                                           ; SOURCE LINE # 187
0058         ?C0040:
0058 0500        R     INC     y
005A E500        R     MOV     A,y
005C C3                CLR     C
005D 9405              SUBB    A,#05H
005F 40A5              JC      ?C0038
0061         ?C0039:
                                           ; SOURCE LINE # 188
0061 7FDC              MOV     R7,#0DCH
0063 7E05              MOV     R6,#05H
0065 120000      E     LCALL   _pause
                                           ; SOURCE LINE # 189
0068 E4                CLR     A
0069 F500        R     MOV     b,A
006B         ?C0045:
                                           ; SOURCE LINE # 190
006B 7F0A              MOV     R7,#0AH
006D 7E00              MOV     R6,#00H
006F 120000      E     LCALL   _pause
                                           ; SOURCE LINE # 191
0072 7F05              MOV     R7,#05H
0074 120000      E     LCALL   _random
0077 EF                MOV     A,R7
0078 2410              ADD     A,#010H
007A FF                MOV     R7,A
007B C007              PUSH    AR7
007D 7F03              MOV     R7,#03H
007F 120000      E     LCALL   _random
0082 EF                MOV     A,R7
0083 240C              ADD     A,#0CH
0085 FD                MOV     R5,A
0086 D007              POP     AR7
0088 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 192
008B 0500        R     INC     b
008D E500        R     MOV     A,b
008F C3                CLR     C
0090 94FF              SUBB    A,#0FFH
0092 40D7              JC      ?C0045
                                           ; SOURCE LINE # 194
0094         ?C0048:
0094 22                RET     
             ; FUNCTION breakout_screen (END)

             ; FUNCTION _delete_brix (BEGIN)
                                           ; SOURCE LINE # 196
0000 8F00        R     MOV     x,R7
0002 8D00        R     MOV     y,R5
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 15  

                                           ; SOURCE LINE # 198
0004 1500        R     DEC     x
0006 1500        R     DEC     x
                                           ; SOURCE LINE # 199
0008 5300FC      R     ANL     x,#0FCH
                                           ; SOURCE LINE # 200
000B 0500        R     INC     x
000D 0500        R     INC     x
                                           ; SOURCE LINE # 201
000F E4                CLR     A
0010 F500        R     MOV     i,A
0012         ?C0049:
0012 C3                CLR     C
0013 E500        R     MOV     A,i
0015 6480              XRL     A,#080H
0017 9484              SUBB    A,#084H
0019 500D              JNC     ?C0050
001B AD00        R     MOV     R5,y
001D AF00        R     MOV     R7,x
001F 120000      E     LCALL   _xor_pixel
0022 0500        R     INC     i
0024 0500        R     INC     x
0026 80EA              SJMP    ?C0049
0028         ?C0050:
                                           ; SOURCE LINE # 202
0028 D50007            DJNZ    brix_left,?C0052
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
002B 120000      R     LCALL   bravo
                                           ; SOURCE LINE # 205
002E E4                CLR     A
002F F500        R     MOV     rounds,A
0031 22                RET     
                                           ; SOURCE LINE # 207
0032         ?C0052:
                                           ; SOURCE LINE # 208
0032 AB00        R     MOV     R3,score+01H
0034 AA00        R     MOV     R2,score
0036 E4                CLR     A
0037 FD                MOV     R5,A
0038 FF                MOV     R7,A
0039 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 209
003C AF00        R     MOV     R7,y
003E EF                MOV     A,R7
003F 33                RLC     A
0040 95E0              SUBB    A,ACC
0042 FE                MOV     R6,A
0043 7400        R     MOV     A,#LOW gain+0FFF8H
0045 2F                ADD     A,R7
0046 F582              MOV     DPL,A
0048 7400        R     MOV     A,#HIGH gain+0FFF8H
004A 3E                ADDC    A,R6
004B F583              MOV     DPH,A
004D E4                CLR     A
004E 93                MOVC    A,@A+DPTR
004F FF                MOV     R7,A
0050 33                RLC     A
0051 95E0              SUBB    A,ACC
0053 FE                MOV     R6,A
0054 EF                MOV     A,R7
0055 2500        R     ADD     A,score+01H
0057 F500        R     MOV     score+01H,A
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 16  

0059 EE                MOV     A,R6
005A 3500        R     ADDC    A,score
005C F500        R     MOV     score,A
                                           ; SOURCE LINE # 210
005E AB00        R     MOV     R3,score+01H
0060 FA                MOV     R2,A
0061 E4                CLR     A
0062 FD                MOV     R5,A
0063 FF                MOV     R7,A
0064 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 211
0067 C3                CLR     C
0068 E500        R     MOV     A,ball_dy
006A 6480              XRL     A,#080H
006C 9480              SUBB    A,#080H
006E 5003              JNC     ?C0054
0070 120000      R     LCALL   L?0126
0073         ?C0054:
                                           ; SOURCE LINE # 212
0073 C3                CLR     C
0074 E500        R     MOV     A,y
0076 6480              XRL     A,#080H
0078 9489              SUBB    A,#089H
007A 500B              JNC     ?C0053
007C E500        R     MOV     A,speed
007E 6480              XRL     A,#080H
0080 9494              SUBB    A,#094H
0082 4003              JC      ?C0053
0084 750014      R     MOV     speed,#014H
                                           ; SOURCE LINE # 213
0087         ?C0053:
0087 22                RET     
             ; FUNCTION _delete_brix (END)

             ; FUNCTION _is_brix_collision (BEGIN)
                                           ; SOURCE LINE # 216
;---- Variable 'y' assigned to Register 'R5' ----
;---- Variable 'x' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 217
0000 C3                CLR     C
0001 EF                MOV     A,R7
0002 6480              XRL     A,#080H
0004 9482              SUBB    A,#082H
0006 401B              JC      ?C0056
0008 D3                SETB    C
0009 EF                MOV     A,R7
000A 6480              XRL     A,#080H
000C 94BD              SUBB    A,#0BDH
000E 5013              JNC     ?C0056
0010 C3                CLR     C
0011 ED                MOV     A,R5
0012 6480              XRL     A,#080H
0014 9488              SUBB    A,#088H
0016 400B              JC      ?C0056
0018 D3                SETB    C
0019 ED                MOV     A,R5
001A 6480              XRL     A,#080H
001C 948F              SUBB    A,#08FH
001E 5003              JNC     ?C0056
                                           ; SOURCE LINE # 219
0020 7F01              MOV     R7,#01H
0022 22                RET     
0023         ?C0056:
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 17  

                                           ; SOURCE LINE # 221
0023 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 222
0025         ?C0057:
0025 22                RET     
             ; FUNCTION _is_brix_collision (END)

             ; FUNCTION _is_bound_collision (BEGIN)
                                           ; SOURCE LINE # 225
;---- Variable 'x' assigned to Register 'R7' ----
;---- Variable 'y' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 226
0000 ED                MOV     A,R5
0001 6406              XRL     A,#06H
0003 6006              JZ      ?C0061
0005 EF                MOV     A,R7
0006 6003              JZ      ?C0061
0008 BF3F04            CJNE    R7,#03FH,?C0059
000B         ?C0061:
000B 7F01              MOV     R7,#01H
000D 8002              SJMP    ?C0060
000F         ?C0059:
000F 7F00              MOV     R7,#00H
0011         ?C0060:
                                           ; SOURCE LINE # 227
0011         ?C0062:
0011 22                RET     
             ; FUNCTION _is_bound_collision (END)

             ; FUNCTION _is_paddle_collision (BEGIN)
                                           ; SOURCE LINE # 230
;---- Variable 'x' assigned to Register 'R7' ----
;---- Variable 'y' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 231
0000 BD1F27            CJNE    R5,#01FH,?C0063
0003 C3                CLR     C
0004 E500        R     MOV     A,paddle_pos
0006 6480              XRL     A,#080H
0008 F8                MOV     R0,A
0009 EF                MOV     A,R7
000A 6480              XRL     A,#080H
000C 98                SUBB    A,R0
000D 401B              JC      ?C0063
000F E500        R     MOV     A,paddle_used
0011 120000      R     LCALL   L?0120
0014 EF                MOV     A,R7
0015 33                RLC     A
0016 95E0              SUBB    A,ACC
0018 FE                MOV     R6,A
0019 C3                CLR     C
001A EF                MOV     A,R7
001B 9D                SUBB    A,R5
001C EC                MOV     A,R4
001D 6480              XRL     A,#080H
001F F8                MOV     R0,A
0020 EE                MOV     A,R6
0021 6480              XRL     A,#080H
0023 98                SUBB    A,R0
0024 5004              JNC     ?C0063
0026 7F01              MOV     R7,#01H
0028 8002              SJMP    ?C0064
002A         ?C0063:
002A 7F00              MOV     R7,#00H
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 18  

002C         ?C0064:
                                           ; SOURCE LINE # 232
002C         ?C0065:
002C 22                RET     
             ; FUNCTION _is_paddle_collision (END)

             ; FUNCTION check_collision (BEGIN)
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0000 7F0A              MOV     R7,#0AH
0002 120000      E     LCALL   _noise
                                           ; SOURCE LINE # 236
0005 AD00        R     MOV     R5,ball_y
0007 AF00        R     MOV     R7,ball_x
0009 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 237
000C AD00        R     MOV     R5,ball_y
000E AF00        R     MOV     R7,ball_x
0010 120000      R     LCALL   _is_brix_collision
0013 EF                MOV     A,R7
0014 6009              JZ      ?C0066
                                           ; SOURCE LINE # 238
0016 AD00        R     MOV     R5,ball_y
0018 AF00        R     MOV     R7,ball_x
001A 120000      R     LCALL   _delete_brix
                                           ; SOURCE LINE # 239
001D 8040              SJMP    ?C0067
001F         ?C0066:
001F AD00        R     MOV     R5,ball_y
0021 AF00        R     MOV     R7,ball_x
0023 120000      R     LCALL   _is_bound_collision
0026 EF                MOV     A,R7
0027 6022              JZ      ?C0068
                                           ; SOURCE LINE # 240
0029 E500        R     MOV     A,ball_y
002B B40603            CJNE    A,#06H,?C0069
002E 120000      R     LCALL   L?0126
0031         ?C0069:
                                           ; SOURCE LINE # 241
0031 E500        R     MOV     A,ball_x
0033 6004              JZ      ?C0071
0035 643F              XRL     A,#03FH
0037 7026              JNZ     ?C0067
0039         ?C0071:
                                           ; SOURCE LINE # 242
0039 E500        R     MOV     A,ball_dx
003B F4                CPL     A
003C 04                INC     A
003D F500        R     MOV     ball_dx,A
                                           ; SOURCE LINE # 243
003F E500        R     MOV     A,ball_dy
0041 B41F1B            CJNE    A,#01FH,?C0067
                                           ; SOURCE LINE # 244
0044 C3                CLR     C
0045 9500        R     SUBB    A,ball_dy
0047 F500        R     MOV     ball_dy,A
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 247
0049 8014              SJMP    ?C0067
004B         ?C0068:
                                           ; SOURCE LINE # 248
004B 120000      R     LCALL   L?0127
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 19  

                                           ; SOURCE LINE # 249
004E E500        R     MOV     A,ball_x
0050 6500        R     XRL     A,paddle_pos
0052 6008              JZ      ?C0075
0054 E500        R     MOV     A,paddle_pos
0056 2500        R     ADD     A,paddle_used
0058 14                DEC     A
0059 B50003            CJNE    A,ball_x,?C0067
005C         ?C0075:
                                           ; SOURCE LINE # 250
005C 750002      R     MOV     x_factor,#02H
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
005F         ?C0067:
                                           ; SOURCE LINE # 253
005F AD00        R     MOV     R5,ball_y
0061 AF00        R     MOV     R7,ball_x
0063 020000      E     LJMP    _xor_pixel
             ; FUNCTION check_collision (END)

             ; FUNCTION move_ball (BEGIN)
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0000 120000      R     LCALL   L?0122
                                           ; SOURCE LINE # 258
0003 E500        R     MOV     A,ball_dx
0005 8500F0      R     MOV     B,x_factor
0008 A4                MUL     AB
0009 2500        R     ADD     A,ball_x
000B F500        R     MOV     ball_x,A
                                           ; SOURCE LINE # 259
000D C3                CLR     C
000E 6480              XRL     A,#080H
0010 9480              SUBB    A,#080H
0012 5005              JNC     ?C0077
                                           ; SOURCE LINE # 260
0014 E4                CLR     A
0015 F500        R     MOV     ball_x,A
                                           ; SOURCE LINE # 261
0017 800C              SJMP    ?C0078
0019         ?C0077:
0019 D3                SETB    C
001A E500        R     MOV     A,ball_x
001C 6480              XRL     A,#080H
001E 94BF              SUBB    A,#0BFH
0020 4003              JC      ?C0078
                                           ; SOURCE LINE # 262
0022 75003F      R     MOV     ball_x,#03FH
                                           ; SOURCE LINE # 263
0025         ?C0078:
                                           ; SOURCE LINE # 264
0025 E500        R     MOV     A,ball_dy
0027 2500        R     ADD     A,ball_y
0029 F500        R     MOV     ball_y,A
                                           ; SOURCE LINE # 265
002B D3                SETB    C
002C 6480              XRL     A,#080H
002E 949F              SUBB    A,#09FH
0030 4005              JC      ?C0080
                                           ; SOURCE LINE # 266
0032 75001F      R     MOV     ball_y,#01FH
                                           ; SOURCE LINE # 267
0035 800C              SJMP    ?C0081
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 20  

0037         ?C0080:
0037 C3                CLR     C
0038 E500        R     MOV     A,ball_y
003A 6480              XRL     A,#080H
003C 9486              SUBB    A,#086H
003E 5003              JNC     ?C0081
                                           ; SOURCE LINE # 268
0040 750006      R     MOV     ball_y,#06H
                                           ; SOURCE LINE # 269
0043         ?C0081:
                                           ; SOURCE LINE # 270
0043 120000      R     LCALL   L?0122
0046 EF                MOV     A,R7
0047 6003              JZ      ?C0083
                                           ; SOURCE LINE # 271
0049 020000      R     LJMP    check_collision
                                           ; SOURCE LINE # 272
004C         ?C0083:
004C E500        R     MOV     A,ball_y
004E 641F              XRL     A,#01FH
0050 7018              JNZ     ?C0086
                                           ; SOURCE LINE # 273
0052 AD00        R     MOV     R5,ball_y
0054 AF00        R     MOV     R7,ball_x
0056 120000      E     LCALL   _xor_pixel
                                           ; SOURCE LINE # 274
0059 120000      R     LCALL   L?0118
005C 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 275
005F 1500        R     DEC     rounds
                                           ; SOURCE LINE # 276
0061 120000      R     LCALL   L?0119
0064 120000      E     LCALL   _print_int
                                           ; SOURCE LINE # 277
0067 750001      R     MOV     new_round,#01H
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
006A         ?C0086:
006A 22                RET     
006B         L?0122:
006B AD00        R     MOV     R5,ball_y
006D AF00        R     MOV     R7,ball_x
006F 120000      E     LCALL   _xor_pixel
0072 22                RET     
             ; FUNCTION move_ball (END)

             ; FUNCTION _move_paddle (BEGIN)
                                           ; SOURCE LINE # 283
0000 8F00        R     MOV     direction,R7
                                           ; SOURCE LINE # 284
0002 120000      R     LCALL   draw_paddle
                                           ; SOURCE LINE # 285
0005 E500        R     MOV     A,direction
0007 B5000D            CJNE    A,paddle_last,?C0087
                                           ; SOURCE LINE # 286
000A C3                CLR     C
000B E500        R     MOV     A,paddle_dx
000D 6480              XRL     A,#080H
000F 9484              SUBB    A,#084H
0011 5007              JNC     ?C0089
0013 0500        R     INC     paddle_dx
                                           ; SOURCE LINE # 287
0015 8003              SJMP    ?C0089
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 21  

0017         ?C0087:
                                           ; SOURCE LINE # 288
0017 750001      R     MOV     paddle_dx,#01H
                                           ; SOURCE LINE # 289
001A         ?C0089:
                                           ; SOURCE LINE # 290
001A E500        R     MOV     A,direction
001C 603E              JZ      ?C0090
                                           ; SOURCE LINE # 291
001E C3                CLR     C
001F 743F              MOV     A,#03FH
0021 9500        R     SUBB    A,paddle_used
0023 FF                MOV     R7,A
0024 C3                CLR     C
0025 6480              XRL     A,#080H
0027 F8                MOV     R0,A
0028 E500        R     MOV     A,paddle_pos
002A 6480              XRL     A,#080H
002C 98                SUBB    A,R0
002D 5048              JNC     ?C0094
                                           ; SOURCE LINE # 292
002F E500        R     MOV     A,paddle_dx
0031 120000      R     LCALL   L?0120
0034 E500        R     MOV     A,paddle_used
0036 FB                MOV     R3,A
0037 33                RLC     A
0038 95E0              SUBB    A,ACC
003A FA                MOV     R2,A
003B C3                CLR     C
003C 743F              MOV     A,#03FH
003E 9B                SUBB    A,R3
003F FB                MOV     R3,A
0040 E4                CLR     A
0041 9A                SUBB    A,R2
0042 FA                MOV     R2,A
0043 C3                CLR     C
0044 ED                MOV     A,R5
0045 9B                SUBB    A,R3
0046 EA                MOV     A,R2
0047 6480              XRL     A,#080H
0049 F8                MOV     R0,A
004A EC                MOV     A,R4
004B 6480              XRL     A,#080H
004D 98                SUBB    A,R0
004E 5008              JNC     ?C0092
0050 E500        R     MOV     A,paddle_pos
0052 2500        R     ADD     A,paddle_dx
0054 FE                MOV     R6,A
0055 FF                MOV     R7,A
0056 8000              SJMP    ?C0093
0058         ?C0092:
0058         ?C0093:
0058 8F00        R     MOV     paddle_pos,R7
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
005A 801B              SJMP    ?C0094
005C         ?C0090:
                                           ; SOURCE LINE # 295
005C D3                SETB    C
005D E500        R     MOV     A,paddle_pos
005F 6480              XRL     A,#080H
0061 9481              SUBB    A,#081H
0063 4012              JC      ?C0094
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 22  

                                           ; SOURCE LINE # 296
0065 E500        R     MOV     A,paddle_pos
0067 9500        R     SUBB    A,paddle_dx
0069 FF                MOV     R7,A
006A D3                SETB    C
006B 6480              XRL     A,#080H
006D 9481              SUBB    A,#081H
006F 4002              JC      ?C0096
0071 8002              SJMP    ?C0097
0073         ?C0096:
0073 7F01              MOV     R7,#01H
0075         ?C0097:
0075 8F00        R     MOV     paddle_pos,R7
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
0077         ?C0094:
                                           ; SOURCE LINE # 299
0077 120000      R     LCALL   draw_paddle
                                           ; SOURCE LINE # 300
007A 850000      R     MOV     paddle_last,direction
                                           ; SOURCE LINE # 301
007D 22                RET     
             ; FUNCTION _move_paddle (END)

             ; FUNCTION game_over (BEGIN)
                                           ; SOURCE LINE # 304
                                           ; SOURCE LINE # 307
0000 7500FF      R     MOV     frq,#0FFH
0003 750064      R     MOV     frq+01H,#064H
                                           ; SOURCE LINE # 308
0006 E4                CLR     A
0007 F500        R     MOV     i,A
0009         ?C0099:
                                           ; SOURCE LINE # 309
0009 7F01              MOV     R7,#01H
000B 120000      E     LCALL   _scroll_down
                                           ; SOURCE LINE # 310
000E 7D02              MOV     R5,#02H
0010 AF00        R     MOV     R7,frq+01H
0012 AE00        R     MOV     R6,frq
0014 120000      E     LCALL   _tone
                                           ; SOURCE LINE # 311
0017 74BA              MOV     A,#0BAH
0019 2500        R     ADD     A,frq+01H
001B F500        R     MOV     frq+01H,A
001D 74FF              MOV     A,#0FFH
001F 3500        R     ADDC    A,frq
0021 F500        R     MOV     frq,A
                                           ; SOURCE LINE # 312
0023 0500        R     INC     i
0025 C3                CLR     C
0026 E500        R     MOV     A,i
0028 6480              XRL     A,#080H
002A 94A0              SUBB    A,#0A0H
002C 40DB              JC      ?C0099
                                           ; SOURCE LINE # 313
002E         ?C0102:
002E 22                RET     
             ; FUNCTION game_over (END)

             ; FUNCTION breakout (BEGIN)
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 317
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 23  

0000 120000      R     LCALL   init_game
0003         ?C0103:
                                           ; SOURCE LINE # 318
0003 E500        R     MOV     A,rounds
0005 6030              JZ      ?C0104
                                           ; SOURCE LINE # 319
0007 E500        R     MOV     A,new_round
0009 6003              JZ      ?C0105
000B 120000      R     LCALL   wait_service
000E         ?C0105:
                                           ; SOURCE LINE # 320
000E 120000      R     LCALL   move_ball
                                           ; SOURCE LINE # 321
0011 120000      E     LCALL   keypad_read
;---- Variable 'k' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 322
0014 EF                MOV     A,R7
0015 24F8              ADD     A,#0F8H
0017 6008              JZ      ?C0108
0019 2404              ADD     A,#04H
001B 700B              JNZ     ?C0109
                                           ; SOURCE LINE # 323
001D         ?C0107:
                                           ; SOURCE LINE # 324
001D E4                CLR     A
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 325
001F 8002              SJMP    ?C0116
                                           ; SOURCE LINE # 326
0021         ?C0108:
                                           ; SOURCE LINE # 327
0021 7F01              MOV     R7,#01H
0023         ?C0116:
0023 120000      R     LCALL   _move_paddle
                                           ; SOURCE LINE # 328
0026 8003              SJMP    ?C0106
                                           ; SOURCE LINE # 329
0028         ?C0109:
                                           ; SOURCE LINE # 330
0028 750001      R     MOV     paddle_dx,#01H
                                           ; SOURCE LINE # 331
002B         ?C0106:
                                           ; SOURCE LINE # 332
002B AF00        R     MOV     R7,speed
002D EF                MOV     A,R7
002E 33                RLC     A
002F 95E0              SUBB    A,ACC
0031 FE                MOV     R6,A
0032 120000      E     LCALL   _pause
                                           ; SOURCE LINE # 333
0035 80CC              SJMP    ?C0103
0037         ?C0104:
                                           ; SOURCE LINE # 334
0037 120000      R     LCALL   game_over
                                           ; SOURCE LINE # 335
003A D3                SETB    C
003B E500        R     MOV     A,score+01H
003D 9500        R     SUBB    A,high_score+01H
003F E500        R     MOV     A,score
0041 9500        R     SUBB    A,high_score
0043 4006              JC      ?C0111
0045 850000      R     MOV     high_score,score
0048 850000      R     MOV     high_score+01H,score+01H
C51 COMPILER V9.53.0.0   BREAKOUT                                                          01/12/2018 16:46:10 PAGE 24  

                                           ; SOURCE LINE # 336
004B         ?C0111:
004B 22                RET     
             ; FUNCTION breakout (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1331    ----
   CONSTANT SIZE    =     43    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
