C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE CHIP8
OBJECT MODULE PLACED IN .\src\chip8.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Jacques
                    -\SimplicityStudio\v4_workspace\BBchip8\src\chip8.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3
                    -) OPTIMIZE(9,SPEED) DEFINE(NDEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Jacques\SimplicityStudio\v4_workspace\
                    -BBchip8\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.0//Device/shared/si8051base;C:/SiliconLabs/Simpl
                    -icityStudio/v4/developer/sdks/8051/v4.1.0//Device/EFM8BB1/inc) REGFILE(BBchip8.ORC) PRINT(.\src\chip8.lst) COND CODE PAG
                    -EWIDTH(120) PAGELENGTH(65) OBJECT(.\src\chip8.OBJ)

line level    source

   1          /*
   2           * chip8.c
   3           *
   4           *  Created on: 2018-01-03
   5           *      Author: Jacques
   6           */
   7          
   8          #include <stdlib.h>
   9          #include <string.h>
  10          #include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
  11          #include "InitDevice.h"
  12          #include "chip8.h"
  13          
  14          
  15          
  16          unsigned char xdata video[256];
  17          
  18          char code digits[30]={
  19             0xea,0xaa,0xe0, // 0
  20             0x4c,0x44,0xe0, // 1
  21             0xe2,0xe8,0xe0, // 2
  22             0xe2,0xe2,0xe0, // 3
  23             0xaa,0xe2,0x20, // 4
  24             0xe8,0xe2,0xe0, // 5
  25             0x88,0xea,0xe0, // 6
  26             0xe2,0x22,0x20, // 7
  27             0xea,0xea,0xe0, // 8
  28             0xea,0xe2,0x20  // 9
  29          };
  30          
  31          //static t_vm vm_state;
  32          //static unsigned char vm_data[DATA_SIZE];
  33          
  34          void clr_scr(){
  35   1              memset(video,0,HBYTES*VRES);
  36   1      }
  37          // scroll down 1-31 lines
  38          void scroll_down(char lines){
  39   1              if (!lines) return;
  40   1              lines &=0x1f;
  41   1              memmove(video+HBYTES*lines,video,HBYTES*VRES-HBYTES*lines);
  42   1              memset(video,0,HBYTES*lines);
  43   1      }
  44          
  45          // scroll up 1..31 lines
  46          void scroll_up(char lines){
  47   1              if (!lines) return;
  48   1              lines &=0x1f;
  49   1              memmove(video,video+HBYTES*lines,HBYTES*VRES-HBYTES*lines);
  50   1              memset(video+HBYTES*VRES-HBYTES*lines,0,HBYTES*lines);
  51   1      }
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 2   

  52          
  53          // scroll left 1 pixel
  54          void scroll_left(){
  55   1              char row,col,ofs;
  56   1              for (row=0;row<VRES;row++){
  57   2                      ofs=row*HBYTES;
  58   2                      for (col=0;col<(HBYTES-1);col++){
  59   3                              video[ofs]<<=1;
  60   3                              video[ofs]|=video[ofs+1]>>7;
  61   3                              ofs++;
  62   3                      }
  63   2                      video[ofs]<<=1;
  64   2              }
  65   1      }
  66          
  67          // scroll right 1 pixel
  68          void scroll_right(){
  69   1              char row,col,ofs;
  70   1              for (row=0;row<VRES;row++){
  71   2                      ofs=row*HBYTES+HBYTES-1;
  72   2                      for (col=HBYTES-1;col;col--){
  73   3                              video[ofs]>>=1;
  74   3                              video[ofs]|=video[ofs-1]<<7;
  75   3                              ofs--;
  76   3                      }
  77   2                      video[ofs]>>=1;
  78   2              }
  79   1      }
  80          
  81          char xor_pixel(char x, char y){
  82   1              int i;
  83   1              char mask;
  84   1      
  85   1              mask=1<<(7-x%8);
  86   1              i=y*8+x/8;
  87   1              video[i]^=mask;
  88   1              return !(video[i]&mask);
  89   1      }
  90          
  91          char draw_sprite(char x, char y, char width,char height, char* sprite){
  92   1              char h,w,collision;
  93   1      
  94   1              collision=0;
  95   1              for (h=0;h<height;h++)
  96   1                      for (w=0;w<width;w++){
  97   2                              if (sprite[h]&((1<<(7-w)))){
  98   3                                      collision|=xor_pixel(x+w,y+h);
  99   3                              }
 100   2                      }
 101   1              return collision;
 102   1      }
 103          
 104          void draw_digit(char x, char y, char digit){
 105   1              char row,ofs,nibble[1];
 106   1      
 107   1              digit %= 10;
 108   1              ofs = digit*3;
 109   1              for (row=0;row<5;row++){
 110   2                      if (row&1){
 111   3                              nibble[0]=digits[ofs+(row>>1)]<<4;
 112   3                      }else{
 113   3                              nibble[0]=digits[ofs+(row>>1)];
 114   3                      }
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 3   

 115   2                      draw_sprite(x,y,4,1,nibble);
 116   2                      y++;
 117   2              }
 118   1      }
 119          
 120          void print_int(char x, char y, unsigned int u){
 121   1              char r,modulo;
 122   1      
 123   1              for (r=x+16;r>=x;r-=4){
 124   2                      modulo=u%10;
 125   2                      draw_digit(r,y,modulo);
 126   2                      u/=10;
 127   2                      if (!u)break;
 128   2              }
 129   1      }
 130          
 131          
 132          #define MS 65012
 133          // pause in milliseconds
 134          void pause(unsigned int msec){
 135   1              TL1=MS&0xff;
 136   1              TH1=MS>>8;
 137   1              TCON_TF1=0;
 138   1              TMOD|=1<<TMOD_T1M__SHIFT;
 139   1              TCON_TR1=1;
 140   1              while (msec){
 141   2                      while (!TCON_TF1);
 142   2                      msec--;
 143   2                      TL1=MS&0xff;
 144   2                      TH1=MS>>8;
 145   2                      TCON_TF1=0;
 146   2              }
 147   1              TCON_TR1=0;
 148   1      }
 149          
 150          char rand_bit(){
 151   1              ADC0CN0_ADINT=0;
 152   1              ADC0CN0_ADEN=1;
 153   1              ADC0CN0_ADBUSY=1;
 154   1              while (!ADC0CN0_ADINT);
 155   1              ADC0CN0_ADEN=0;
 156   1              return ADC0L&1;
 157   1      }
 158          
 159          unsigned random(char n){
 160   1              unsigned r=0;
 161   1      
 162   1              for (;n;n--){
 163   2                      r<<=1;
 164   2                      r+=rand_bit();
 165   2              }
 166   1              return r;
 167   1      }
 168          
 169          #define _tmr0_on(r) { TL0=r&255;\
 170                                  TH0=r>>8;\
 171                                  TCON_TF1=0;\
 172                                  TCON_TR0=1;}
 173          
 174          #define _tmr0_off() {TCON_TR0=0;P0_B7=0;}
 175          
 176          // generate noise for milliseconds
 177          void noise(unsigned char msec){
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 4   

 178   1              TL1=MS&0xff;
 179   1              TH1=MS>>8;
 180   1              TCON&=~TCON_TF1__BMASK;
 181   1      //      TMOD|=1<<TMOD_T1M__SHIFT;
 182   1              TCON|=TCON_TR1__BMASK;
 183   1              while (msec){
 184   2                      P0_B7=rand_bit();
 185   2                      if (TCON&TCON_TF1__BMASK){
 186   3                              TL1=MS&0xff;
 187   3                              TH1=MS>>8;
 188   3                              TCON&=~TCON_TF1__BMASK;
 189   3                              msec--;
 190   3                      }
 191   2              }
 192   1              TCON&=~TCON_TR1__BMASK;
 193   1              P0_B7=0;
 194   1      }
 195          
 196          unsigned int tmr_reload;
 197          void sound_fx(unsigned char snd, unsigned char msec){
 198   1      #define FR_500 (65005)
 199   1      #define FR_750 (65196)
 200   1      #define FR_5245 (65486)
 201   1      
 202   1              char phase;
 203   1      
 204   1              _tmr0_on(FR_5245);
 205   1              switch (snd){
 206   2              case BEEP:
 207   2                      tmr_reload=FR_500;
 208   2              pause(msec);
 209   2                      break;
 210   2              case UP_SWEEP:
 211   2                      tmr_reload=FR_500;
 212   2                      phase=50;
 213   2                      while (msec){
 214   3                              tmr_reload+=phase;
 215   3                              if (tmr_reload<FR_500){
 216   4                                      tmr_reload=FR_500;
 217   4                              }
 218   3                              pause(5);
 219   3                              if (msec>5) msec-=5;else msec=0;
 220   3                      }
 221   2                      break;
 222   2              case WARBLE:
 223   2                      tmr_reload=FR_500;
 224   2                      phase=0;
 225   2                      while (msec){
 226   3                              pause(5);
 227   3                              if (msec>5) msec-=5;else msec=0;
 228   3                              if (!phase) tmr_reload=FR_750;
 229   3                              else tmr_reload=FR_500;
 230   3                              phase=1-phase;
 231   3                      }
 232   2                      break;
 233   2              case DOWN_SWEEP:
 234   2                      tmr_reload=FR_5245;
 235   2                      phase=50;
 236   2                      while (msec){
 237   3                              tmr_reload-=phase;
 238   3                              if (tmr_reload<FR_500){
 239   4                                      tmr_reload=FR_5245;
 240   4                              }
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 5   

 241   3                              pause(5);
 242   3                              if (msec>5) msec-=5;else msec=0;
 243   3                      }
 244   2                      break;
 245   2              case TRIANGLE_SWEEP:
 246   2                      tmr_reload=FR_500;
 247   2                      phase=50;
 248   2                      while (msec){
 249   3                              pause(5);
 250   3                              tmr_reload+=phase;
 251   3                              if (tmr_reload<FR_500){
 252   4                                      phase=-phase;
 253   4                                      tmr_reload+=phase;
 254   4                              }
 255   3                              if (msec>5)msec-=5;else msec=0;
 256   3                      }
 257   2                      break;
 258   2              }//switch
 259   1              _tmr0_off();
 260   1      }
 261          
 262          void tone(unsigned int frq,unsigned char duration){
 263   1              char i;
 264   1              if (frq!=0xffff){
 265   2                      _tmr0_on(frq);
 266   2                  tmr_reload=frq;
 267   2              }
 268   1              for (i=0;i<duration;i++){
 269   2                      pause(33);
 270   2              }
 271   1              _tmr0_off();
 272   1      }
 273          
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com0066 (BEGIN)
0000         L?0103:
0000 AF00        R     MOV     R7,ofs
0002         L?0104:
0002 EF                MOV     A,R7
0003 33                RLC     A
0004 95E0              SUBB    A,ACC
0006         L?0105:
0006 FE                MOV     R6,A
0007         L?0106:
0007 7400        R     MOV     A,#LOW video
0009 2F                ADD     A,R7
000A F582              MOV     DPL,A
000C 7400        R     MOV     A,#HIGH video
000E 3E                ADDC    A,R6
000F F583              MOV     DPH,A
0011 22                RET     
0012         L?0107:
0012 AF00        R     MOV     R7,phase
0014 EF                MOV     A,R7
0015 33                RLC     A
0016 95E0              SUBB    A,ACC
0018 FE                MOV     R6,A
0019 EF                MOV     A,R7
001A 2500        R     ADD     A,tmr_reload+01H
001C F500        R     MOV     tmr_reload+01H,A
001E EE                MOV     A,R6
001F 3500        R     ADDC    A,tmr_reload
0021         L?0108:
0021 F500        R     MOV     tmr_reload,A
0023 FE                MOV     R6,A
0024 AF00        R     MOV     R7,tmr_reload+01H
0026 E4                CLR     A
0027 FC                MOV     R4,A
0028 FD                MOV     R5,A
0029 7BED              MOV     R3,#0EDH
002B 7AFD              MOV     R2,#0FDH
002D F9                MOV     R1,A
002E F8                MOV     R0,A
002F D3                SETB    C
0030 020000      E     LJMP    ?C?SLCMP
0033         L?0109:
0033 A2E7              MOV     C,ACC.7
0035 13                RRC     A
0036 FF                MOV     R7,A
0037 33                RLC     A
0038 95E0              SUBB    A,ACC
003A FE                MOV     R6,A
003B AD00        R     MOV     R5,ofs
003D ED                MOV     A,R5
003E 33                RLC     A
003F 95E0              SUBB    A,ACC
0041 FC                MOV     R4,A
0042 ED                MOV     A,R5
0043 2F                ADD     A,R7
0044 FF                MOV     R7,A
0045 EC                MOV     A,R4
0046 3E                ADDC    A,R6
0047 FE                MOV     R6,A
0048 7400        R     MOV     A,#LOW digits
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 7   

004A 2F                ADD     A,R7
004B F582              MOV     DPL,A
004D 7400        R     MOV     A,#HIGH digits
004F 3E                ADDC    A,R6
0050 F583              MOV     DPH,A
0052 E4                CLR     A
0053 93                MOVC    A,@A+DPTR
0054 22                RET     
0055         L?0110:
0055 AF00        R     MOV     R7,lines
0057         L?0111:
0057 EF                MOV     A,R7
0058 33                RLC     A
0059 95E0              SUBB    A,ACC
005B FE                MOV     R6,A
005C EF                MOV     A,R7
005D 7803              MOV     R0,#03H
005F 22                RET     
0060         L?0112:
0060         L?0113:
0060 7F05              MOV     R7,#05H
0062 7E00              MOV     R6,#00H
0064 120000      R     LCALL   _pause
0067 E500        R     MOV     A,msec
0069 D3                SETB    C
006A 9405              SUBB    A,#05H
006C 22                RET     
006D         L?0114:
006D FF                MOV     R7,A
006E C3                CLR     C
006F E4                CLR     A
0070 9F                SUBB    A,R7
0071 F582              MOV     DPL,A
0073 7401              MOV     A,#01H
0075 9E                SUBB    A,R6
0076 F583              MOV     DPH,A
0078 7400        R     MOV     A,#LOW video
007A 2F                ADD     A,R7
007B F9                MOV     R1,A
007C 7400        R     MOV     A,#HIGH video
007E 3E                ADDC    A,R6
007F 22                RET     
0080         L?0115:
0080         L?0116:
0080 7500FD      R     MOV     tmr_reload,#0FDH
0083 7500ED      R     MOV     tmr_reload+01H,#0EDH
0086 22                RET     
0087         L?0117:
0087         L?0118:
0087 758BF4            MOV     TL1,#0F4H
008A 758DFD            MOV     TH1,#0FDH
008D 22                RET     
008E         L?0119:
008E         L?0120:
008E 74FB              MOV     A,#0FBH
0090 2500        R     ADD     A,msec
0092 F500        R     MOV     msec,A
0094 22                RET     
0095         L?0121:
0095 7D00              MOV     R5,#00H
0097         L?0122:
0097 7B01              MOV     R3,#01H
0099 7A00        R     MOV     R2,#HIGH video
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 8   

009B 7900        R     MOV     R1,#LOW video
009D 22                RET     
009E         L?0123:
009E AE00        R     MOV     R6,u
00A0 AF00        R     MOV     R7,u+01H
00A2 7C00              MOV     R4,#00H
00A4 7D0A              MOV     R5,#0AH
00A6 020000      E     LJMP    ?C?UIDIV
             ; FUNCTION Com0066 (END)

             ; FUNCTION clr_scr (BEGIN)
                                           ; SOURCE LINE # 34
                                           ; SOURCE LINE # 35
0000 7E01              MOV     R6,#01H
0002 7F00              MOV     R7,#00H
0004 120000      R     LCALL   L?0121
0007 020000      E     LJMP    ?C?MEMSET
             ; FUNCTION clr_scr (END)

             ; FUNCTION _scroll_down (BEGIN)
                                           ; SOURCE LINE # 38
0000 8F00        R     MOV     lines,R7
                                           ; SOURCE LINE # 39
0002 E500        R     MOV     A,lines
0004 6030              JZ      ?C0003
0006         ?C0002:
                                           ; SOURCE LINE # 40
0006 53001F      R     ANL     lines,#01FH
                                           ; SOURCE LINE # 41
0009 120000      R     LCALL   L?0110
000C         ?C0091:
000C C3                CLR     C
000D 33                RLC     A
000E CE                XCH     A,R6
000F 33                RLC     A
0010 CE                XCH     A,R6
0011 D8F9              DJNZ    R0,?C0091
0013 120000      R     LCALL   L?0114
0016 A801              MOV     R0,AR1
0018 FC                MOV     R4,A
0019 7D01              MOV     R5,#01H
001B 120000      R     LCALL   L?0122
001E AE83              MOV     R6,DPH
0020 AF82              MOV     R7,DPL
0022 120000      E     LCALL   ?C?MEMMOVE
                                           ; SOURCE LINE # 42
0025 120000      R     LCALL   L?0110
0028         ?C0092:
0028 C3                CLR     C
0029 33                RLC     A
002A CE                XCH     A,R6
002B 33                RLC     A
002C CE                XCH     A,R6
002D D8F9              DJNZ    R0,?C0092
002F FF                MOV     R7,A
0030 120000      R     LCALL   L?0121
0033 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 43
0036         ?C0003:
0036 22                RET     
             ; FUNCTION _scroll_down (END)

             ; FUNCTION _scroll_up (BEGIN)
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 9   

                                           ; SOURCE LINE # 46
0000 8F00        R     MOV     lines,R7
                                           ; SOURCE LINE # 47
0002 E500        R     MOV     A,lines
0004 603F              JZ      ?C0005
0006         ?C0004:
                                           ; SOURCE LINE # 48
0006 53001F      R     ANL     lines,#01FH
                                           ; SOURCE LINE # 49
0009 AF00        R     MOV     R7,lines
000B 120000      R     LCALL   L?0111
000E         ?C0093:
000E C3                CLR     C
000F 33                RLC     A
0010 CE                XCH     A,R6
0011 33                RLC     A
0012 CE                XCH     A,R6
0013 D8F9              DJNZ    R0,?C0093
0015 120000      R     LCALL   L?0114
0018 FA                MOV     R2,A
0019 7B01              MOV     R3,#01H
001B 7800        R     MOV     R0,#LOW video
001D 7C00        R     MOV     R4,#HIGH video
001F 7D01              MOV     R5,#01H
0021 AE83              MOV     R6,DPH
0023 AF82              MOV     R7,DPL
0025 120000      E     LCALL   ?C?MEMMOVE
                                           ; SOURCE LINE # 50
0028 7D00              MOV     R5,#00H
002A AF00        R     MOV     R7,lines
002C 120000      R     LCALL   L?0111
002F         ?C0094:
002F C3                CLR     C
0030 33                RLC     A
0031 CE                XCH     A,R6
0032 33                RLC     A
0033 CE                XCH     A,R6
0034 D8F9              DJNZ    R0,?C0094
0036 FF                MOV     R7,A
0037 7B01              MOV     R3,#01H
0039 C3                CLR     C
003A 7400        R     MOV     A,#LOW video+0100H
003C 9F                SUBB    A,R7
003D F9                MOV     R1,A
003E 7400        R     MOV     A,#HIGH video+0100H
0040 9E                SUBB    A,R6
0041 FA                MOV     R2,A
0042 120000      E     LCALL   ?C?MEMSET
                                           ; SOURCE LINE # 51
0045         ?C0005:
0045 22                RET     
             ; FUNCTION _scroll_up (END)

             ; FUNCTION scroll_left (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 56
0000 E4                CLR     A
0001 F500        R     MOV     row,A
0003         ?C0006:
                                           ; SOURCE LINE # 57
0003 E500        R     MOV     A,row
0005 75F008            MOV     B,#08H
0008 A4                MUL     AB
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 10  

0009 F500        R     MOV     ofs,A
                                           ; SOURCE LINE # 58
000B E4                CLR     A
000C F500        R     MOV     col,A
000E         ?C0009:
                                           ; SOURCE LINE # 59
000E 120000      R     LCALL   L?0103
0011 E0                MOVX    A,@DPTR
0012 25E0              ADD     A,ACC
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0015 120000      R     LCALL   L?0106
0018 C083              PUSH    DPH
001A C082              PUSH    DPL
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E E500        R     MOV     A,ofs
0020 FD                MOV     R5,A
0021 33                RLC     A
0022 95E0              SUBB    A,ACC
0024 FC                MOV     R4,A
0025 7400        R     MOV     A,#LOW video+01H
0027 2D                ADD     A,R5
0028 F582              MOV     DPL,A
002A 7400        R     MOV     A,#HIGH video+01H
002C 3C                ADDC    A,R4
002D F583              MOV     DPH,A
002F E0                MOVX    A,@DPTR
0030 C4                SWAP    A
0031 13                RRC     A
0032 13                RRC     A
0033 13                RRC     A
0034 5401              ANL     A,#01H
0036 FE                MOV     R6,A
0037 EF                MOV     A,R7
0038 4E                ORL     A,R6
0039 D082              POP     DPL
003B D083              POP     DPH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
003E 0500        R     INC     ofs
                                           ; SOURCE LINE # 62
0040 0500        R     INC     col
0042 E500        R     MOV     A,col
0044 B407C7            CJNE    A,#07H,?C0009
0047         ?C0010:
                                           ; SOURCE LINE # 63
0047 120000      R     LCALL   L?0103
004A E0                MOVX    A,@DPTR
004B 25E0              ADD     A,ACC
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
004E 0500        R     INC     row
0050 E500        R     MOV     A,row
0052 6420              XRL     A,#020H
0054 70AD              JNZ     ?C0006
                                           ; SOURCE LINE # 65
0056         ?C0012:
0056 22                RET     
             ; FUNCTION scroll_left (END)

             ; FUNCTION scroll_right (BEGIN)
                                           ; SOURCE LINE # 68
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 11  

                                           ; SOURCE LINE # 70
0000 E4                CLR     A
0001 F500        R     MOV     row,A
0003         ?C0013:
                                           ; SOURCE LINE # 71
0003 E500        R     MOV     A,row
0005 75F008            MOV     B,#08H
0008 A4                MUL     AB
0009 2407              ADD     A,#07H
000B F500        R     MOV     ofs,A
                                           ; SOURCE LINE # 72
000D 750007      R     MOV     col,#07H
0010         ?C0016:
                                           ; SOURCE LINE # 73
0010 AF00        R     MOV     R7,ofs
0012 120000      R     LCALL   L?0104
0015 E0                MOVX    A,@DPTR
0016 C3                CLR     C
0017 13                RRC     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0019 120000      R     LCALL   L?0106
001C C083              PUSH    DPH
001E C082              PUSH    DPL
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 E500        R     MOV     A,ofs
0024 FD                MOV     R5,A
0025 33                RLC     A
0026 95E0              SUBB    A,ACC
0028 FC                MOV     R4,A
0029 7400        R     MOV     A,#LOW video+0FFFFH
002B 2D                ADD     A,R5
002C F582              MOV     DPL,A
002E 7400        R     MOV     A,#HIGH video+0FFFFH
0030 3C                ADDC    A,R4
0031 F583              MOV     DPH,A
0033 E0                MOVX    A,@DPTR
0034 C4                SWAP    A
0035 33                RLC     A
0036 33                RLC     A
0037 33                RLC     A
0038 5480              ANL     A,#080H
003A FE                MOV     R6,A
003B EF                MOV     A,R7
003C 4E                ORL     A,R6
003D D082              POP     DPL
003F D083              POP     DPH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0042 1500        R     DEC     ofs
                                           ; SOURCE LINE # 76
0044 D500C9            DJNZ    col,?C0016
0047         ?C0017:
                                           ; SOURCE LINE # 77
0047 AF00        R     MOV     R7,ofs
0049 120000      R     LCALL   L?0104
004C E0                MOVX    A,@DPTR
004D C3                CLR     C
004E 13                RRC     A
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0050 0500        R     INC     row
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 12  

0052 E500        R     MOV     A,row
0054 B420AC            CJNE    A,#020H,?C0013
                                           ; SOURCE LINE # 79
0057         ?C0019:
0057 22                RET     
             ; FUNCTION scroll_right (END)

             ; FUNCTION _xor_pixel (BEGIN)
                                           ; SOURCE LINE # 81
;---- Variable 'x' assigned to Register 'R4' ----
0000 AC07              MOV     R4,AR7
;---- Variable 'y' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 85
0002 EC                MOV     A,R4
0003 75F008            MOV     B,#08H
0006 120000      E     LCALL   ?C?SCDIV
0009 AFF0              MOV     R7,B
000B C3                CLR     C
000C 7407              MOV     A,#07H
000E 9F                SUBB    A,R7
000F FF                MOV     R7,A
0010 7401              MOV     A,#01H
0012 A807              MOV     R0,AR7
0014 08                INC     R0
0015 8002              SJMP    ?C0096
0017         ?C0095:
0017 C3                CLR     C
0018 33                RLC     A
0019         ?C0096:
0019 D8FC              DJNZ    R0,?C0095
;---- Variable 'mask' assigned to Register 'R3' ----
001B FB                MOV     R3,A
                                           ; SOURCE LINE # 86
001C AF05              MOV     R7,AR5
001E 120000      R     LCALL   L?0111
0021         ?C0097:
0021 C3                CLR     C
0022 33                RLC     A
0023 CE                XCH     A,R6
0024 33                RLC     A
0025 CE                XCH     A,R6
0026 D8F9              DJNZ    R0,?C0097
0028 FF                MOV     R7,A
0029 EC                MOV     A,R4
002A 75F008            MOV     B,#08H
002D 120000      E     LCALL   ?C?SCDIV
0030 FD                MOV     R5,A
0031 33                RLC     A
0032 95E0              SUBB    A,ACC
0034 FC                MOV     R4,A
0035 EF                MOV     A,R7
0036 2D                ADD     A,R5
0037 FF                MOV     R7,A
0038 EE                MOV     A,R6
0039 3C                ADDC    A,R4
;---- Variable 'i' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 87
003A 120000      R     LCALL   L?0105
003D E0                MOVX    A,@DPTR
003E 6B                XRL     A,R3
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
0040 120000      R     LCALL   L?0106
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 13  

0043 E0                MOVX    A,@DPTR
0044 5B                ANL     A,R3
0045 7F00              MOV     R7,#00H
0047 7002              JNZ     ?C0020
0049 7F01              MOV     R7,#01H
004B         ?C0020:
004B         ?C0021:
                                           ; SOURCE LINE # 89
004B         ?C0022:
004B 22                RET     
             ; FUNCTION _xor_pixel (END)

             ; FUNCTION _draw_sprite (BEGIN)
                                           ; SOURCE LINE # 91
0000 8F00        R     MOV     x,R7
0002 8D00        R     MOV     y,R5
0004 8B00        R     MOV     width,R3
                                           ; SOURCE LINE # 94
0006 E4                CLR     A
0007 F500        R     MOV     collision,A
                                           ; SOURCE LINE # 95
0009 F500        R     MOV     h,A
000B         ?C0023:
000B C3                CLR     C
000C E500        R     MOV     A,height
000E 6480              XRL     A,#080H
0010 F8                MOV     R0,A
0011 E500        R     MOV     A,h
0013 6480              XRL     A,#080H
0015 98                SUBB    A,R0
0016 505F              JNC     ?C0024
                                           ; SOURCE LINE # 96
0018 E4                CLR     A
0019 F500        R     MOV     w,A
001B         ?C0026:
001B C3                CLR     C
001C E500        R     MOV     A,width
001E 6480              XRL     A,#080H
0020 F8                MOV     R0,A
0021 E500        R     MOV     A,w
0023 6480              XRL     A,#080H
0025 98                SUBB    A,R0
0026 504B              JNC     ?C0025
                                           ; SOURCE LINE # 97
0028 AB00        R     MOV     R3,sprite
002A AA00        R     MOV     R2,sprite+01H
002C A900        R     MOV     R1,sprite+02H
002E AF00        R     MOV     R7,h
0030 EF                MOV     A,R7
0031 33                RLC     A
0032 95E0              SUBB    A,ACC
0034 8F82              MOV     DPL,R7
0036 F583              MOV     DPH,A
0038 120000      E     LCALL   ?C?CLDOPTR
003B FD                MOV     R5,A
003C 33                RLC     A
003D 95E0              SUBB    A,ACC
003F FC                MOV     R4,A
0040 C3                CLR     C
0041 7407              MOV     A,#07H
0043 9500        R     SUBB    A,w
0045 FF                MOV     R7,A
0046 7401              MOV     A,#01H
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 14  

0048 7E00              MOV     R6,#00H
004A A807              MOV     R0,AR7
004C 08                INC     R0
004D 8005              SJMP    ?C0099
004F         ?C0098:
004F C3                CLR     C
0050 33                RLC     A
0051 CE                XCH     A,R6
0052 33                RLC     A
0053 CE                XCH     A,R6
0054         ?C0099:
0054 D8F9              DJNZ    R0,?C0098
0056 FF                MOV     R7,A
0057 EE                MOV     A,R6
0058 5C                ANL     A,R4
0059 FE                MOV     R6,A
005A EF                MOV     A,R7
005B 5D                ANL     A,R5
005C 4E                ORL     A,R6
005D 6010              JZ      ?C0028
                                           ; SOURCE LINE # 98
005F E500        R     MOV     A,x
0061 2500        R     ADD     A,w
0063 FF                MOV     R7,A
0064 E500        R     MOV     A,y
0066 2500        R     ADD     A,h
0068 FD                MOV     R5,A
0069 120000      R     LCALL   _xor_pixel
006C EF                MOV     A,R7
006D 4200        R     ORL     collision,A
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
006F         ?C0028:
006F 0500        R     INC     w
0071 80A8              SJMP    ?C0026
0073         ?C0025:
0073 0500        R     INC     h
0075 8094              SJMP    ?C0023
0077         ?C0024:
                                           ; SOURCE LINE # 101
0077 AF00        R     MOV     R7,collision
                                           ; SOURCE LINE # 102
0079         ?C0030:
0079 22                RET     
             ; FUNCTION _draw_sprite (END)

             ; FUNCTION _draw_digit (BEGIN)
                                           ; SOURCE LINE # 104
0000 8F00        R     MOV     x,R7
0002 8D00        R     MOV     y,R5
;---- Variable 'digit' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 107
0004 EB                MOV     A,R3
0005 75F00A            MOV     B,#0AH
0008 120000      E     LCALL   ?C?SCDIV
000B ABF0              MOV     R3,B
                                           ; SOURCE LINE # 108
000D EB                MOV     A,R3
000E 75F003            MOV     B,#03H
0011 A4                MUL     AB
0012 F500        R     MOV     ofs,A
                                           ; SOURCE LINE # 109
0014 E4                CLR     A
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 15  

0015 F500        R     MOV     row,A
0017         ?C0031:
                                           ; SOURCE LINE # 110
0017 E500        R     MOV     A,row
0019 30E00A            JNB     ACC.0,?C0034
                                           ; SOURCE LINE # 111
001C 120000      R     LCALL   L?0109
001F C4                SWAP    A
0020 54F0              ANL     A,#0F0H
0022 F500        R     MOV     nibble,A
                                           ; SOURCE LINE # 112
0024 8007              SJMP    ?C0035
0026         ?C0034:
                                           ; SOURCE LINE # 113
0026 E500        R     MOV     A,row
0028 120000      R     LCALL   L?0109
002B F500        R     MOV     nibble,A
                                           ; SOURCE LINE # 114
002D         ?C0035:
                                           ; SOURCE LINE # 115
002D 750001      R     MOV     ?_draw_sprite?BYTE+03H,#01H
0030 750000      R     MOV     ?_draw_sprite?BYTE+04H,#00H
0033 750000      R     MOV     ?_draw_sprite?BYTE+05H,#HIGH nibble
0036 750000      R     MOV     ?_draw_sprite?BYTE+06H,#LOW nibble
0039 7B04              MOV     R3,#04H
003B AD00        R     MOV     R5,y
003D AF00        R     MOV     R7,x
003F 120000      R     LCALL   _draw_sprite
                                           ; SOURCE LINE # 116
0042 0500        R     INC     y
                                           ; SOURCE LINE # 117
0044 0500        R     INC     row
0046 C3                CLR     C
0047 E500        R     MOV     A,row
0049 6480              XRL     A,#080H
004B 9485              SUBB    A,#085H
004D 40C8              JC      ?C0031
                                           ; SOURCE LINE # 118
004F         ?C0036:
004F 22                RET     
             ; FUNCTION _draw_digit (END)

             ; FUNCTION _print_int (BEGIN)
                                           ; SOURCE LINE # 120
0000 8F00        R     MOV     x,R7
0002 8D00        R     MOV     y,R5
0004 8A00        R     MOV     u,R2
0006 8B00        R     MOV     u+01H,R3
                                           ; SOURCE LINE # 123
0008 E500        R     MOV     A,x
000A 2410              ADD     A,#010H
000C F500        R     MOV     r,A
000E         ?C0037:
000E C3                CLR     C
000F E500        R     MOV     A,x
0011 6480              XRL     A,#080H
0013 F8                MOV     R0,A
0014 E500        R     MOV     A,r
0016 6480              XRL     A,#080H
0018 98                SUBB    A,R0
0019 4021              JC      ?C0041
                                           ; SOURCE LINE # 124
001B 120000      R     LCALL   L?0123
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 16  

;---- Variable 'modulo' assigned to Register 'R3' ----
001E AB05              MOV     R3,AR5
                                           ; SOURCE LINE # 125
0020 AD00        R     MOV     R5,y
0022 AF00        R     MOV     R7,r
0024 120000      R     LCALL   _draw_digit
                                           ; SOURCE LINE # 126
0027 120000      R     LCALL   L?0123
002A 8E00        R     MOV     u,R6
002C 8F00        R     MOV     u+01H,R7
                                           ; SOURCE LINE # 127
002E E500        R     MOV     A,u+01H
0030 4500        R     ORL     A,u
0032 6008              JZ      ?C0041
0034         ?C0040:
                                           ; SOURCE LINE # 128
0034         ?C0039:
0034 74FC              MOV     A,#0FCH
0036 2500        R     ADD     A,r
0038 F500        R     MOV     r,A
003A 80D2              SJMP    ?C0037
                                           ; SOURCE LINE # 129
003C         ?C0041:
003C 22                RET     
             ; FUNCTION _print_int (END)

             ; FUNCTION _pause (BEGIN)
                                           ; SOURCE LINE # 134
;---- Variable 'msec' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
0000 120000      R     LCALL   L?0117
                                           ; SOURCE LINE # 137
0003 C28F              CLR     TCON_TF1
                                           ; SOURCE LINE # 138
0005 438910            ORL     TMOD,#010H
                                           ; SOURCE LINE # 139
0008 D28E              SETB    TCON_TR1
000A         ?C0042:
                                           ; SOURCE LINE # 140
000A EF                MOV     A,R7
000B 4E                ORL     A,R6
000C 600F              JZ      ?C0043
000E         ?C0044:
                                           ; SOURCE LINE # 141
000E 308FFD            JNB     TCON_TF1,?C0044
0011         ?C0045:
                                           ; SOURCE LINE # 142
0011 EF                MOV     A,R7
0012 1F                DEC     R7
0013 7001              JNZ     ?C0100
0015 1E                DEC     R6
0016         ?C0100:
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
0016 120000      R     LCALL   L?0117
                                           ; SOURCE LINE # 145
0019 C28F              CLR     TCON_TF1
                                           ; SOURCE LINE # 146
001B 80ED              SJMP    ?C0042
001D         ?C0043:
                                           ; SOURCE LINE # 147
001D C28E              CLR     TCON_TR1
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 17  

                                           ; SOURCE LINE # 148
001F 22                RET     
             ; FUNCTION _pause (END)

             ; FUNCTION rand_bit (BEGIN)
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
0000 C2ED              CLR     ADC0CN0_ADINT
                                           ; SOURCE LINE # 152
0002 D2EF              SETB    ADC0CN0_ADEN
                                           ; SOURCE LINE # 153
0004 D2EC              SETB    ADC0CN0_ADBUSY
0006         ?C0047:
                                           ; SOURCE LINE # 154
0006 30EDFD            JNB     ADC0CN0_ADINT,?C0047
0009         ?C0048:
                                           ; SOURCE LINE # 155
0009 C2EF              CLR     ADC0CN0_ADEN
                                           ; SOURCE LINE # 156
000B E5BD              MOV     A,ADC0L
000D 5401              ANL     A,#01H
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 157
0010         ?C0049:
0010 22                RET     
             ; FUNCTION rand_bit (END)

             ; FUNCTION _random (BEGIN)
                                           ; SOURCE LINE # 159
;---- Variable 'n' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 160
;---- Variable 'r' assigned to Register 'R2/R3' ----
0002 E4                CLR     A
0003 FB                MOV     R3,A
0004 FA                MOV     R2,A
                                           ; SOURCE LINE # 162
0005         ?C0050:
0005 ED                MOV     A,R5
0006 6018              JZ      ?C0051
                                           ; SOURCE LINE # 163
0008 EB                MOV     A,R3
0009 25E0              ADD     A,ACC
000B FB                MOV     R3,A
000C EA                MOV     A,R2
000D 33                RLC     A
000E FA                MOV     R2,A
                                           ; SOURCE LINE # 164
000F 120000      R     LCALL   rand_bit
0012 EF                MOV     A,R7
0013 33                RLC     A
0014 95E0              SUBB    A,ACC
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 2B                ADD     A,R3
0019 FB                MOV     R3,A
001A EE                MOV     A,R6
001B 3A                ADDC    A,R2
001C FA                MOV     R2,A
                                           ; SOURCE LINE # 165
001D 1D                DEC     R5
001E 80E5              SJMP    ?C0050
0020         ?C0051:
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 18  

                                           ; SOURCE LINE # 166
0020 AE02              MOV     R6,AR2
0022 AF03              MOV     R7,AR3
                                           ; SOURCE LINE # 167
0024         ?C0053:
0024 22                RET     
             ; FUNCTION _random (END)

             ; FUNCTION _noise (BEGIN)
                                           ; SOURCE LINE # 177
;---- Variable 'msec' assigned to Register 'R6' ----
0000 AE07              MOV     R6,AR7
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
0002 120000      R     LCALL   L?0118
                                           ; SOURCE LINE # 180
0005 53887F            ANL     TCON,#07FH
                                           ; SOURCE LINE # 182
0008 438840            ORL     TCON,#040H
000B         ?C0054:
                                           ; SOURCE LINE # 183
000B EE                MOV     A,R6
000C 6016              JZ      ?C0055
                                           ; SOURCE LINE # 184
000E 120000      R     LCALL   rand_bit
0011 EF                MOV     A,R7
0012 24FF              ADD     A,#0FFH
0014 9287              MOV     P0_B7,C
                                           ; SOURCE LINE # 185
0016 E588              MOV     A,TCON
0018 30E7F0            JNB     ACC.7,?C0054
                                           ; SOURCE LINE # 186
                                           ; SOURCE LINE # 187
001B 120000      R     LCALL   L?0118
                                           ; SOURCE LINE # 188
001E 53887F            ANL     TCON,#07FH
                                           ; SOURCE LINE # 189
0021 1E                DEC     R6
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
0022 80E7              SJMP    ?C0054
0024         ?C0055:
                                           ; SOURCE LINE # 192
0024 5388BF            ANL     TCON,#0BFH
                                           ; SOURCE LINE # 193
0027 C287              CLR     P0_B7
                                           ; SOURCE LINE # 194
0029 22                RET     
             ; FUNCTION _noise (END)

             ; FUNCTION _sound_fx (BEGIN)
                                           ; SOURCE LINE # 197
0000 8D00        R     MOV     msec,R5
;---- Variable 'snd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 204
0002 758ACE            MOV     TL0,#0CEH
0005 758CFF            MOV     TH0,#0FFH
0008 C28F              CLR     TCON_TF1
000A D28C              SETB    TCON_TR0
                                           ; SOURCE LINE # 205
000C EF                MOV     A,R7
000D 24FE              ADD     A,#0FEH
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 19  

000F 6020              JZ      ?C0060
0011 14                DEC     A
0012 6041              JZ      ?C0066
0014 14                DEC     A
0015 6070              JZ      ?C0073
0017 14                DEC     A
0018 7003              JNZ     $ + 5H
001A 020000      R     LJMP    ?C0079
001D 2404              ADD     A,#04H
001F 6003              JZ      $ + 5H
0021 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 206
0024         ?C0059:
                                           ; SOURCE LINE # 207
0024 120000      R     LCALL   L?0115
                                           ; SOURCE LINE # 208
0027 AF00        R     MOV     R7,msec
0029 7E00              MOV     R6,#00H
002B 120000      R     LCALL   _pause
                                           ; SOURCE LINE # 209
002E 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 210
0031         ?C0060:
                                           ; SOURCE LINE # 211
0031 120000      R     LCALL   L?0115
                                           ; SOURCE LINE # 212
0034 750032      R     MOV     phase,#032H
0037         ?C0061:
                                           ; SOURCE LINE # 213
0037 E500        R     MOV     A,msec
0039 7003              JNZ     $ + 5H
003B 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
003E 120000      R     LCALL   L?0107
0041 4003              JC      ?C0063
                                           ; SOURCE LINE # 216
0043 120000      R     LCALL   L?0116
                                           ; SOURCE LINE # 217
0046         ?C0063:
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0046 120000      R     LCALL   L?0112
0049 4005              JC      ?C0064
004B 120000      R     LCALL   L?0119
004E 80E7              SJMP    ?C0061
0050         ?C0064:
0050 E4                CLR     A
0051 F500        R     MOV     msec,A
                                           ; SOURCE LINE # 220
0053 80E2              SJMP    ?C0061
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0055         ?C0066:
                                           ; SOURCE LINE # 223
0055 120000      R     LCALL   L?0116
                                           ; SOURCE LINE # 224
0058 E4                CLR     A
0059 F500        R     MOV     phase,A
005B         ?C0067:
                                           ; SOURCE LINE # 225
005B E500        R     MOV     A,msec
005D 7003              JNZ     $ + 5H
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 20  

005F 020000      R     LJMP    ?C0058
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
0062 120000      R     LCALL   L?0112
0065 4005              JC      ?C0069
0067 120000      R     LCALL   L?0119
006A 8003              SJMP    ?C0070
006C         ?C0069:
006C E4                CLR     A
006D F500        R     MOV     msec,A
006F         ?C0070:
                                           ; SOURCE LINE # 228
006F E500        R     MOV     A,phase
0071 7008              JNZ     ?C0071
0073 7500FE      R     MOV     tmr_reload,#0FEH
0076 7500AC      R     MOV     tmr_reload+01H,#0ACH
0079 8003              SJMP    ?C0072
007B         ?C0071:
                                           ; SOURCE LINE # 229
007B 120000      R     LCALL   L?0116
007E         ?C0072:
                                           ; SOURCE LINE # 230
007E C3                CLR     C
007F 7401              MOV     A,#01H
0081 9500        R     SUBB    A,phase
0083 F500        R     MOV     phase,A
                                           ; SOURCE LINE # 231
0085 80D4              SJMP    ?C0067
                                           ; SOURCE LINE # 232
                                           ; SOURCE LINE # 233
0087         ?C0073:
                                           ; SOURCE LINE # 234
0087 7500FF      R     MOV     tmr_reload,#0FFH
008A 7500CE      R     MOV     tmr_reload+01H,#0CEH
                                           ; SOURCE LINE # 235
008D 750032      R     MOV     phase,#032H
0090         ?C0074:
                                           ; SOURCE LINE # 236
0090 E500        R     MOV     A,msec
0092 6066              JZ      ?C0058
                                           ; SOURCE LINE # 237
0094 AF00        R     MOV     R7,phase
0096 EF                MOV     A,R7
0097 33                RLC     A
0098 95E0              SUBB    A,ACC
009A FE                MOV     R6,A
009B C3                CLR     C
009C E500        R     MOV     A,tmr_reload+01H
009E 9F                SUBB    A,R7
009F F500        R     MOV     tmr_reload+01H,A
00A1 E500        R     MOV     A,tmr_reload
00A3 9E                SUBB    A,R6
                                           ; SOURCE LINE # 238
00A4 120000      R     LCALL   L?0108
00A7 4006              JC      ?C0076
                                           ; SOURCE LINE # 239
00A9 7500FF      R     MOV     tmr_reload,#0FFH
00AC 7500CE      R     MOV     tmr_reload+01H,#0CEH
                                           ; SOURCE LINE # 240
00AF         ?C0076:
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
00AF 120000      R     LCALL   L?0113
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 21  

00B2 4005              JC      ?C0077
00B4 120000      R     LCALL   L?0120
00B7 80D7              SJMP    ?C0074
00B9         ?C0077:
00B9 E4                CLR     A
00BA F500        R     MOV     msec,A
                                           ; SOURCE LINE # 243
00BC 80D2              SJMP    ?C0074
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
00BE         ?C0079:
                                           ; SOURCE LINE # 246
00BE 120000      R     LCALL   L?0116
                                           ; SOURCE LINE # 247
00C1 750032      R     MOV     phase,#032H
00C4         ?C0080:
                                           ; SOURCE LINE # 248
00C4 E500        R     MOV     A,msec
00C6 6032              JZ      ?C0058
                                           ; SOURCE LINE # 249
00C8 7F05              MOV     R7,#05H
00CA 7E00              MOV     R6,#00H
00CC 120000      R     LCALL   _pause
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 251
00CF 120000      R     LCALL   L?0107
00D2 4015              JC      ?C0082
                                           ; SOURCE LINE # 252
00D4 E500        R     MOV     A,phase
00D6 F4                CPL     A
00D7 04                INC     A
00D8 F500        R     MOV     phase,A
                                           ; SOURCE LINE # 253
00DA FF                MOV     R7,A
00DB 33                RLC     A
00DC 95E0              SUBB    A,ACC
00DE FE                MOV     R6,A
00DF EF                MOV     A,R7
00E0 2500        R     ADD     A,tmr_reload+01H
00E2 F500        R     MOV     tmr_reload+01H,A
00E4 EE                MOV     A,R6
00E5 3500        R     ADDC    A,tmr_reload
00E7 F500        R     MOV     tmr_reload,A
                                           ; SOURCE LINE # 254
00E9         ?C0082:
                                           ; SOURCE LINE # 255
00E9 E500        R     MOV     A,msec
00EB D3                SETB    C
00EC 9405              SUBB    A,#05H
00EE 4005              JC      ?C0083
00F0 120000      R     LCALL   L?0120
00F3 80CF              SJMP    ?C0080
00F5         ?C0083:
00F5 E4                CLR     A
00F6 F500        R     MOV     msec,A
                                           ; SOURCE LINE # 256
00F8 80CA              SJMP    ?C0080
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
00FA         ?C0058:
                                           ; SOURCE LINE # 259
00FA C28C              CLR     TCON_TR0
00FC C287              CLR     P0_B7
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 22  

                                           ; SOURCE LINE # 260
00FE 22                RET     
             ; FUNCTION _sound_fx (END)

             ; FUNCTION _tone (BEGIN)
                                           ; SOURCE LINE # 262
;---- Variable 'frq' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
;---- Variable 'duration' assigned to Register 'R1' ----
0004 A905              MOV     R1,AR5
                                           ; SOURCE LINE # 264
0006 EB                MOV     A,R3
0007 F4                CPL     A
0008 7002              JNZ     ?C0101
000A EA                MOV     A,R2
000B F4                CPL     A
000C         ?C0101:
000C 600D              JZ      ?C0086
                                           ; SOURCE LINE # 265
000E EF                MOV     A,R7
000F F58A              MOV     TL0,A
0011 8A8C              MOV     TH0,R2
0013 C28F              CLR     TCON_TF1
0015 D28C              SETB    TCON_TR0
                                           ; SOURCE LINE # 266
0017 8A00        R     MOV     tmr_reload,R2
0019 8B00        R     MOV     tmr_reload+01H,R3
                                           ; SOURCE LINE # 267
001B         ?C0086:
                                           ; SOURCE LINE # 268
;---- Variable 'i' assigned to Register 'R5' ----
001B E4                CLR     A
001C FD                MOV     R5,A
001D         ?C0087:
001D E9                MOV     A,R1
001E FF                MOV     R7,A
001F ED                MOV     A,R5
0020 FB                MOV     R3,A
0021 33                RLC     A
0022 95E0              SUBB    A,ACC
0024 FA                MOV     R2,A
0025 C3                CLR     C
0026 EB                MOV     A,R3
0027 9F                SUBB    A,R7
0028 7480              MOV     A,#080H
002A F8                MOV     R0,A
002B 6A                XRL     A,R2
002C 98                SUBB    A,R0
002D 500A              JNC     ?C0088
                                           ; SOURCE LINE # 269
002F 7F21              MOV     R7,#021H
0031 7E00              MOV     R6,#00H
0033 120000      R     LCALL   _pause
                                           ; SOURCE LINE # 270
0036 0D                INC     R5
0037 80E4              SJMP    ?C0087
0039         ?C0088:
                                           ; SOURCE LINE # 271
0039 C28C              CLR     TCON_TR0
003B C287              CLR     P0_B7
                                           ; SOURCE LINE # 272
003D 22                RET     
C51 COMPILER V9.53.0.0   CHIP8                                                             01/12/2018 14:40:01 PAGE 23  

             ; FUNCTION _tone (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1263    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =    256    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
